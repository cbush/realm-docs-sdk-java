{"commentText": "Interface used when interested in updates on data either being uploaded to or downloaded from\n a Realm Object Server.", "tags": [], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Interface used when interested in updates on data either being uploaded to or downloaded from\n a Realm Object Server.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Interface used when interested in updates on data either being uploaded to or downloaded from\n a Realm Object Server."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Interface used when interested in updates on data either being uploaded to or downloaded from\n a Realm Object Server."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Interface used when interested in updates on data either being uploaded to or downloaded from\n a Realm Object Server.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Interface used when interested in updates on data either being uploaded to or downloaded from\n a Realm Object Server."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Interface used when interested in updates on data either being uploaded to or downloaded from\n a Realm Object Server."}]}], "name": "ProgressListener", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": false, "isAnnotationTypeElement": false, "isInterface": true, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": true, "isIncluded": true, "position": {"line": 27, "column": 8, "file": "./realm/realm-library/src/objectServer/java/io/realm/mongodb/sync/ProgressListener.java"}, "_class": "ParsedClassDoc", "containingPackage": {"_class": "PackageDoc", "name": "io.realm.mongodb.sync"}, "qualifiedName": "io.realm.mongodb.sync.ProgressListener", "modifierSpecifier": 513, "modifiers": "public interface", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "io.realm.annotations.Beta", "typeName": "Beta", "qualifiedTypeName": "io.realm.annotations.Beta", "simpleTypeName": "Beta", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}, "elementValues": [], "isSynthesized": false}], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "asString": "io.realm.mongodb.sync.ProgressListener", "typeName": "ProgressListener", "qualifiedTypeName": "io.realm.mongodb.sync.ProgressListener", "simpleTypeName": "ProgressListener", "dimension": "", "isPrimitive": false, "isAbstract": true, "isSerializable": false, "isExternalizable": false, "serializationMethods": [], "serializableFields": [], "definesSerializableFields": false, "interfaceTypes": [], "typeParameters": [], "typeParamTags": [], "fields": [], "enumConstants": [], "methods": [{"commentText": "This method will be called periodically from the underlying Object Server Client responsible\n for uploading and downloading changes from the remote Object Server.\n <p>\n This callback will <i>not</i> happen on the UI thread, but on the worker thread controlling\n the Object Server Client. Use {@code Activity.runOnUiThread(Runnable)} or similar to update\n any UI elements.\n <p>\n <pre>\n {@code\n // Adding an upload progress listener that completes when all known changes have been\n // uploaded.\n session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES, new ProgressListener() {\n   \\@Override\n    public void onChange(Progress progress) {\n      activity.runOnUiThread(new Runnable() {\n        \\@Override\n         public void run() {\n           updateProgressBar(progress);\n         }\n      });\n      if (progress.isTransferComplete() {\n        session.removeProgressListener(this);\n      }\n    }\n });\n }\n </pre>", "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "progress an immutable progress change event with information about current progress. This object is thread safe.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "an immutable progress change event with information about current progress. This object is thread safe."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "progress an immutable progress change event with information about current progress."}], "parameterName": "progress", "parameterComment": "an immutable progress change event with information about current progress. This object is thread safe.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "This method will be called periodically from the underlying Object Server Client responsible\n for uploading and downloading changes from the remote Object Server.\n <p>\n This callback will <i>not</i> happen on the UI thread, but on the worker thread controlling\n the Object Server Client. Use ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "This method will be called periodically from the underlying Object Server Client responsible\n for uploading and downloading changes from the remote Object Server.\n <p>\n This callback will <i>not</i> happen on the UI thread, but on the worker thread controlling\n the Object Server Client. Use "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "This method will be called periodically from the underlying Object Server Client responsible\n for uploading and downloading changes from the remote Object Server."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "Activity.runOnUiThread(Runnable)", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Activity.runOnUiThread(Runnable)"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Activity.runOnUiThread(Runnable)"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or similar to update\n any UI elements.\n <p>\n <pre>\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " or similar to update\n any UI elements.\n <p>\n <pre>\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "or similar to update\n any UI elements."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "\n // Adding an upload progress listener that completes when all known changes have been\n // uploaded.\n session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES, new ProgressListener() {\n   \\@Override\n    public void onChange(Progress progress) {\n      activity.runOnUiThread(new Runnable() {\n        \\@Override\n         public void run() {\n           updateProgressBar(progress);\n         }\n      });\n      if (progress.isTransferComplete() {\n        session.removeProgressListener(this);\n      }\n    }\n });\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n // Adding an upload progress listener that completes when all known changes have been\n // uploaded.\n session.addUploadProgressListener(ProgressMode.CURRENT_CHANGES, new ProgressListener() {\n   \\@Override\n    public void onChange(Progress progress) {\n      activity.runOnUiThread(new Runnable() {\n        \\@Override\n         public void run() {\n           updateProgressBar(progress);\n         }\n      });\n      if (progress.isTransferComplete() {\n        session.removeProgressListener(this);\n      }\n    }\n });\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "// Adding an upload progress listener that completes when all known changes have been\n // uploaded."}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n </pre>", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n </pre>"}], "firstSentenceTags": []}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "This method will be called periodically from the underlying Object Server Client responsible\n for uploading and downloading changes from the remote Object Server.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "This method will be called periodically from the underlying Object Server Client responsible\n for uploading and downloading changes from the remote Object Server."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "This method will be called periodically from the underlying Object Server Client responsible\n for uploading and downloading changes from the remote Object Server."}]}], "name": "onChange", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 59, "column": 10, "file": "./realm/realm-library/src/objectServer/java/io/realm/mongodb/sync/ProgressListener.java"}, "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.mongodb.sync.ProgressListener", "typeName": "ProgressListener", "qualifiedTypeName": "io.realm.mongodb.sync.ProgressListener", "simpleTypeName": "ProgressListener", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public interface"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm.mongodb.sync"}, "qualifiedName": "io.realm.mongodb.sync.ProgressListener.onChange", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "io.realm.mongodb.sync.Progress", "typeName": "Progress", "qualifiedTypeName": "io.realm.mongodb.sync.Progress", "simpleTypeName": "Progress", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "progress", "typeName": "Progress", "asString": "Progress progress", "annotations": []}], "throwsTags": [], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "progress an immutable progress change event with information about current progress. This object is thread safe.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "an immutable progress change event with information about current progress. This object is thread safe."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "progress an immutable progress change event with information about current progress."}], "parameterName": "progress", "parameterComment": "an immutable progress change event with information about current progress. This object is thread safe.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(io.realm.mongodb.sync.Progress)", "flatSignature": "(Progress)", "typeParameters": [], "isAbstract": true, "isDefault": false, "returnType": {"_class": "Type", "asString": "void", "typeName": "void", "qualifiedTypeName": "void", "simpleTypeName": "void", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}], "constructors": [], "innerClasses": []}