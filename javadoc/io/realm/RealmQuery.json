{"commentText": "A RealmQuery encapsulates a query on a {@link io.realm.Realm} or a {@link io.realm.RealmResults} using the Builder\n pattern. The query is executed using either {@link #findAll()} or {@link #findFirst()}.\n <p>\n The input to many of the query functions take a field name as String. Note that this is not type safe. If a\n RealmObject class is refactored care has to be taken to not break any queries.\n <p>\n A {@link io.realm.Realm} is unordered, which means that there is no guarantee that querying a Realm will return the\n objects in the order they where inserted. Use {@link #sort(String)} (String)} and similar methods if a specific order\n is required.\n <p>\n A RealmQuery cannot be passed between different threads.\n <p>\n Results are obtained quickly most of the times. However, launching heavy queries from the UI thread may result\n in a drop of frames or even ANRs. If you want to prevent these behaviors, you can instantiate a Realm using a\n {@link RealmConfiguration} that explicitly sets {@link RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)} to\n {@code false}. This way queries will be forced to be launched from a non-UI thread. Alternatively, you can also use\n {@link #findAllAsync()} or {@link #findFirstAsync()}.", "name": "RealmQuery", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": false, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": true, "isClass": true, "isIncluded": true, "position": {"line": 69, "column": 8, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "<E> the class of the objects to be queried.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the class of the objects to be queried."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "<E> the class of the objects to be queried."}], "parameterName": "E", "parameterComment": "the class of the objects to be queried.", "isTypeParameter": true}, {"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "<a href=\"http://en.wikipedia.org/wiki/Builder_pattern\">Builder pattern</a>", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "<a href=\"http://en.wikipedia.org/wiki/Builder_pattern\">Builder pattern</a>"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "<a href=\"http://en.wikipedia.org/wiki/Builder_pattern\">Builder pattern</a>"}], "label": ""}, {"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "Realm#where(Class)", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm#where(Class)"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm#where(Class)"}], "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "where(Class)"}, {"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "RealmResults#where()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmResults#where()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmResults#where()"}], "label": "", "referencedClassName": "io.realm.RealmResults", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "where()"}], "seeTags": [{"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "<a href=\"http://en.wikipedia.org/wiki/Builder_pattern\">Builder pattern</a>", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "<a href=\"http://en.wikipedia.org/wiki/Builder_pattern\">Builder pattern</a>"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "<a href=\"http://en.wikipedia.org/wiki/Builder_pattern\">Builder pattern</a>"}], "label": ""}, {"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "Realm#where(Class)", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm#where(Class)"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm#where(Class)"}], "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "where(Class)"}, {"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "RealmResults#where()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmResults#where()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmResults#where()"}], "label": "", "referencedClassName": "io.realm.RealmResults", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "where()"}], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "A RealmQuery encapsulates a query on a ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "A RealmQuery encapsulates a query on a "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "A RealmQuery encapsulates a query on a"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "io.realm.Realm", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.Realm"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.Realm"}], "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or a ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " or a "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "or a"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "io.realm.RealmResults", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.RealmResults"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.RealmResults"}], "label": "", "referencedClassName": "io.realm.RealmResults", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " using the Builder\n pattern. The query is executed using either ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " using the Builder\n pattern. The query is executed using either "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "using the Builder\n pattern."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "#findAll()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#findAll()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#findAll()"}], "label": "", "referencedClassName": "io.realm.RealmQuery", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "findAll()"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " or "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "or"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "#findFirst()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#findFirst()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#findFirst()"}], "label": "", "referencedClassName": "io.realm.RealmQuery", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "findFirst()"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n <p>\n The input to many of the query functions take a field name as String. Note that this is not type safe. If a\n RealmObject class is refactored care has to be taken to not break any queries.\n <p>\n A ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n <p>\n The input to many of the query functions take a field name as String. Note that this is not type safe. If a\n RealmObject class is refactored care has to be taken to not break any queries.\n <p>\n A "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "io.realm.Realm", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.Realm"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.Realm"}], "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " is unordered, which means that there is no guarantee that querying a Realm will return the\n objects in the order they where inserted. Use ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " is unordered, which means that there is no guarantee that querying a Realm will return the\n objects in the order they where inserted. Use "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "is unordered, which means that there is no guarantee that querying a Realm will return the\n objects in the order they where inserted."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "#sort(String)", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#sort(String)"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#sort(String)"}], "label": "", "referencedClassName": "io.realm.RealmQuery", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "sort(String)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " (String)} and similar methods if a specific order\n is required.\n <p>\n A RealmQuery cannot be passed between different threads.\n <p>\n Results are obtained quickly most of the times. However, launching heavy queries from the UI thread may result\n in a drop of frames or even ANRs. If you want to prevent these behaviors, you can instantiate a Realm using a\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " (String)} and similar methods if a specific order\n is required.\n <p>\n A RealmQuery cannot be passed between different threads.\n <p>\n Results are obtained quickly most of the times. However, launching heavy queries from the UI thread may result\n in a drop of frames or even ANRs. If you want to prevent these behaviors, you can instantiate a Realm using a\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "(String)} and similar methods if a specific order\n is required."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmConfiguration", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmConfiguration"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmConfiguration"}], "label": "", "referencedClassName": "io.realm.RealmConfiguration", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmConfiguration", "typeName": "RealmConfiguration", "qualifiedTypeName": "io.realm.RealmConfiguration", "simpleTypeName": "RealmConfiguration", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " that explicitly sets ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " that explicitly sets "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "that explicitly sets"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)"}], "label": "", "referencedClassName": "io.realm.RealmConfiguration.Builder", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmConfiguration.Builder", "typeName": "RealmConfiguration.Builder", "qualifiedTypeName": "io.realm.RealmConfiguration.Builder", "simpleTypeName": "Builder", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public static"}, "referencedMemberName": "allowQueriesOnUiThread(boolean)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " to\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " to\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "to"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "false"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "false"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ". This way queries will be forced to be launched from a non-UI thread. Alternatively, you can also use\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ". This way queries will be forced to be launched from a non-UI thread. Alternatively, you can also use\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "#findAllAsync()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#findAllAsync()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#findAllAsync()"}], "label": "", "referencedClassName": "io.realm.RealmQuery", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "findAllAsync()"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " or "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "or"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "#findFirstAsync()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#findFirstAsync()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#findFirstAsync()"}], "label": "", "referencedClassName": "io.realm.RealmQuery", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "findFirstAsync()"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "A RealmQuery encapsulates a query on a ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "A RealmQuery encapsulates a query on a "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "A RealmQuery encapsulates a query on a"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "io.realm.Realm", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.Realm"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.Realm"}], "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or a ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " or a "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "or a"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "io.realm.RealmResults", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.RealmResults"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.RealmResults"}], "label": "", "referencedClassName": "io.realm.RealmResults", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " using the Builder\n pattern.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " using the Builder\n pattern."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "using the Builder\n pattern."}]}], "_class": "ParsedClassDoc", "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isAbstract": false, "isSerializable": false, "isExternalizable": false, "serializationMethods": [], "serializableFields": [], "definesSerializableFields": false, "superclasses": [{"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "inheritedMethods": {"java.lang.Object": ["getClass", "hashCode", "equals", "clone", "toString", "notify", "notifyAll", "wait", "wait", "wait", "finalize"]}, "interfaceTypes": [], "typeParameters": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "typeParamTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "<E> the class of the objects to be queried.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the class of the objects to be queried."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "<E> the class of the objects to be queried."}], "parameterName": "E", "parameterComment": "the class of the objects to be queried.", "isTypeParameter": true}], "fields": [], "enumConstants": [], "methods": [{"commentText": "Checks if {@link io.realm.RealmQuery} is still valid to use i.e., the {@link io.realm.Realm} instance hasn't been\n closed and any parent {@link io.realm.RealmResults} is still valid.", "name": "isValid", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 239, "column": 20, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "{@code true} if still valid to use, {@code false} otherwise.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if still valid to use, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " otherwise."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if still valid to use, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " otherwise."}]}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "io.realm.RealmQuery", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.RealmQuery"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.RealmQuery"}], "label": "", "referencedClassName": "io.realm.RealmQuery", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " is still valid to use i.e., the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " is still valid to use i.e., the "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "is still valid to use i.e., the"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "io.realm.Realm", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.Realm"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.Realm"}], "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " instance hasn't been\n closed and any parent ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " instance hasn't been\n closed and any parent "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "instance hasn't been\n closed and any parent"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "io.realm.RealmResults", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.RealmResults"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.RealmResults"}], "label": "", "referencedClassName": "io.realm.RealmResults", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " is still valid.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " is still valid."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "is still valid."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "io.realm.RealmQuery", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.RealmQuery"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.RealmQuery"}], "label": "", "referencedClassName": "io.realm.RealmQuery", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " is still valid to use i.e., the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " is still valid to use i.e., the "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "is still valid to use i.e., the"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "io.realm.Realm", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.Realm"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.Realm"}], "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " instance hasn't been\n closed and any parent ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " instance hasn't been\n closed and any parent "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "instance hasn't been\n closed and any parent"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "io.realm.RealmResults", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.RealmResults"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.RealmResults"}], "label": "", "referencedClassName": "io.realm.RealmResults", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " is still valid.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " is still valid."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "is still valid."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.isValid", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "boolean", "typeName": "boolean", "qualifiedTypeName": "boolean", "simpleTypeName": "boolean", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Tests if a field is {@code null}. Only works for nullable fields.\n <p>\n For link queries, if any part of the link path is {@code null} the whole path is considered to be {@code null}\n e.g., {@code isNull(\"linkField.stringField\")} will be considered to be {@code null} if either {@code linkField} or\n {@code linkField.stringField} is {@code null}.", "name": "isNull", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 262, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field name.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field name."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field name."}], "parameterName": "fieldName", "parameterComment": "the field name.", "isTypeParameter": false}], "seeTags": [{"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "Required for further infomation.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Required for further infomation."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Required for further infomation."}], "label": "for further infomation.", "referencedClassName": "io.realm.annotations.Required", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.annotations.Required", "typeName": "Required", "qualifiedTypeName": "io.realm.annotations.Required", "simpleTypeName": "Required", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}}], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Tests if a field is ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Tests if a field is "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Tests if a field is"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "null"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "null"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ". Only works for nullable fields.\n <p>\n For link queries, if any part of the link path is ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ". Only works for nullable fields.\n <p>\n For link queries, if any part of the link path is "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "null"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "null"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " the whole path is considered to be ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " the whole path is considered to be "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the whole path is considered to be"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "null"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "null"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n e.g., ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n e.g., "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "e.g.,"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "isNull(\"linkField.stringField\")", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "isNull(\"linkField.stringField\")"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "isNull(\"linkField.stringField\")"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " will be considered to be ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " will be considered to be "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "will be considered to be"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "null"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "null"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if either ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " if either "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if either"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "linkField", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "linkField"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "linkField"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " or\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "or"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "linkField.stringField", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "linkField.stringField"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "linkField.stringField"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " is ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " is "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "is"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "null"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "null"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Tests if a field is ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Tests if a field is "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Tests if a field is"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "null"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "null"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.isNull", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field is not nullable.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field is not nullable."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field is not nullable."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field is not nullable.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field name.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field name."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field name."}], "parameterName": "fieldName", "parameterComment": "the field name.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String)", "flatSignature": "(String)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Tests if a field is not {@code null}. Only works for nullable fields.", "name": "isNotNull", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 277, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field name.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field name."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field name."}], "parameterName": "fieldName", "parameterComment": "the field name.", "isTypeParameter": false}], "seeTags": [{"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "Required for further infomation.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Required for further infomation."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Required for further infomation."}], "label": "for further infomation.", "referencedClassName": "io.realm.annotations.Required", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.annotations.Required", "typeName": "Required", "qualifiedTypeName": "io.realm.annotations.Required", "simpleTypeName": "Required", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}}], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Tests if a field is not ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Tests if a field is not "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Tests if a field is not"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "null"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "null"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ". Only works for nullable fields.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ". Only works for nullable fields."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Tests if a field is not ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Tests if a field is not "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Tests if a field is not"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "null"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "null"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.isNotNull", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field is not nullable.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field is not nullable."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field is not nullable."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field is not nullable.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field name.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field name."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field name."}], "parameterName": "fieldName", "parameterComment": "the field name.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String)", "flatSignature": "(String)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Equal-to comparison.", "name": "equalTo", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 291, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Equal-to comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Equal-to comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.equalTo", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "value", "typeName": "String", "asString": "String value", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}]}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, java.lang.String)", "flatSignature": "(String, String)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Equal-to comparison.", "name": "equalTo", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 304, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "casing    how to handle casing. Setting this to {@link Case#INSENSITIVE} only works for Latin-1 characters.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "how to handle casing. Setting this to "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Case#INSENSITIVE", "label": "", "referencedClassName": "io.realm.Case", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Case", "typeName": "Case", "qualifiedTypeName": "io.realm.Case", "simpleTypeName": "Case", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public final"}, "referencedMemberName": "INSENSITIVE"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " only works for Latin-1 characters."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "casing    how to handle casing."}], "parameterName": "casing", "parameterComment": "how to handle casing. Setting this to {@link Case#INSENSITIVE} only works for Latin-1 characters.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Equal-to comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Equal-to comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.equalTo", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "value", "typeName": "String", "asString": "String value", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}]}, {"type": {"_class": "ClassDoc", "asString": "io.realm.Case", "typeName": "Case", "qualifiedTypeName": "io.realm.Case", "simpleTypeName": "Case", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "casing", "typeName": "Case", "asString": "Case casing", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "casing    how to handle casing. Setting this to {@link Case#INSENSITIVE} only works for Latin-1 characters.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "how to handle casing. Setting this to "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Case#INSENSITIVE", "label": "", "referencedClassName": "io.realm.Case", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Case", "typeName": "Case", "qualifiedTypeName": "io.realm.Case", "simpleTypeName": "Case", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public final"}, "referencedMemberName": "INSENSITIVE"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " only works for Latin-1 characters."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "casing    how to handle casing."}], "parameterName": "casing", "parameterComment": "how to handle casing. Setting this to {@link Case#INSENSITIVE} only works for Latin-1 characters.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, java.lang.String, io.realm.Case)", "flatSignature": "(String, String, Case)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Equal-to comparison.", "name": "equalTo", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 319, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "casing    how to handle casing. Setting this to {@link Case#INSENSITIVE} only works for Latin-1 characters.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "how to handle casing. Setting this to "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Case#INSENSITIVE", "label": "", "referencedClassName": "io.realm.Case", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Case", "typeName": "Case", "qualifiedTypeName": "io.realm.Case", "simpleTypeName": "Case", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public final"}, "referencedMemberName": "INSENSITIVE"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " only works for Latin-1 characters."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "casing    how to handle casing."}], "parameterName": "casing", "parameterComment": "how to handle casing. Setting this to {@link Case#INSENSITIVE} only works for Latin-1 characters.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Equal-to comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Equal-to comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.equalTo", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "RealmAny", "typeName": "RealmAny", "qualifiedTypeName": "RealmAny", "simpleTypeName": "RealmAny", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "RealmAny", "asString": "RealmAny value", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "io.realm.Case", "typeName": "Case", "qualifiedTypeName": "io.realm.Case", "simpleTypeName": "Case", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "casing", "typeName": "Case", "asString": "Case casing", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "casing    how to handle casing. Setting this to {@link Case#INSENSITIVE} only works for Latin-1 characters.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "how to handle casing. Setting this to "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Case#INSENSITIVE", "label": "", "referencedClassName": "io.realm.Case", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Case", "typeName": "Case", "qualifiedTypeName": "io.realm.Case", "simpleTypeName": "Case", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public final"}, "referencedMemberName": "INSENSITIVE"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " only works for Latin-1 characters."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "casing    how to handle casing."}], "parameterName": "casing", "parameterComment": "how to handle casing. Setting this to {@link Case#INSENSITIVE} only works for Latin-1 characters.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, RealmAny, io.realm.Case)", "flatSignature": "(String, RealmAny, Case)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Equal-to comparison.", "name": "equalTo", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 337, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Equal-to comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Equal-to comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.equalTo", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "Decimal128", "typeName": "Decimal128", "qualifiedTypeName": "Decimal128", "simpleTypeName": "Decimal128", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "Decimal128", "asString": "Decimal128 value", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}]}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, Decimal128)", "flatSignature": "(String, Decimal128)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Equal-to comparison.", "name": "equalTo", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 351, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Equal-to comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Equal-to comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.equalTo", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "ObjectId", "typeName": "ObjectId", "qualifiedTypeName": "ObjectId", "simpleTypeName": "ObjectId", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "ObjectId", "asString": "ObjectId value", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}]}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, ObjectId)", "flatSignature": "(String, ObjectId)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Equal-to comparison.", "name": "equalTo", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 506, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Equal-to comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Equal-to comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.equalTo", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "RealmAny", "typeName": "RealmAny", "qualifiedTypeName": "RealmAny", "simpleTypeName": "RealmAny", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "RealmAny", "asString": "RealmAny value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, RealmAny)", "flatSignature": "(String, RealmAny)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "In comparison. This allows you to test if objects match any value in an array of values.", "name": "in", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 521, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "values    array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "array of values to compare with. If "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the empty array is provided the query will never\n                  match any results."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "values    array of values to compare with."}], "parameterName": "values", "parameterComment": "array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison. This allows you to test if objects match any value in an array of values.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison. This allows you to test if objects match any value in an array of values."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.in", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "java.lang.String[]", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "[]", "isPrimitive": false, "elementType": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "isClass": false, "isAnnotationType": false}, "name": "values", "typeName": "java.lang.String[]", "asString": "java.lang.String[] values", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}]}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field isn't a String field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field isn't a String field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field isn't a String field."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field isn't a String field.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "values    array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "array of values to compare with. If "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the empty array is provided the query will never\n                  match any results."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "values    array of values to compare with."}], "parameterName": "values", "parameterComment": "array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, java.lang.String[])", "flatSignature": "(String, String[])", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "In comparison. This allows you to test if objects match any value in an array of values.", "name": "in", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 535, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "values    array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "array of values to compare with. If "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the empty array is provided the query will never\n                  match any results."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "values    array of values to compare with."}], "parameterName": "values", "parameterComment": "array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "casing    how casing is handled. {@link Case#INSENSITIVE} works only for the Latin-1 characters.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "how casing is handled. "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Case#INSENSITIVE", "label": "", "referencedClassName": "io.realm.Case", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Case", "typeName": "Case", "qualifiedTypeName": "io.realm.Case", "simpleTypeName": "Case", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public final"}, "referencedMemberName": "INSENSITIVE"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " works only for the Latin-1 characters."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "casing    how casing is handled."}], "parameterName": "casing", "parameterComment": "how casing is handled. {@link Case#INSENSITIVE} works only for the Latin-1 characters.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison. This allows you to test if objects match any value in an array of values.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison. This allows you to test if objects match any value in an array of values."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.in", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "java.lang.String[]", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "[]", "isPrimitive": false, "elementType": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "isClass": false, "isAnnotationType": false}, "name": "values", "typeName": "java.lang.String[]", "asString": "java.lang.String[] values", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}]}, {"type": {"_class": "ClassDoc", "asString": "io.realm.Case", "typeName": "Case", "qualifiedTypeName": "io.realm.Case", "simpleTypeName": "Case", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "casing", "typeName": "Case", "asString": "Case casing", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field isn't a String field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field isn't a String field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field isn't a String field."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field isn't a String field.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "values    array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "array of values to compare with. If "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the empty array is provided the query will never\n                  match any results."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "values    array of values to compare with."}], "parameterName": "values", "parameterComment": "array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "casing    how casing is handled. {@link Case#INSENSITIVE} works only for the Latin-1 characters.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "how casing is handled. "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Case#INSENSITIVE", "label": "", "referencedClassName": "io.realm.Case", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Case", "typeName": "Case", "qualifiedTypeName": "io.realm.Case", "simpleTypeName": "Case", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public final"}, "referencedMemberName": "INSENSITIVE"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " works only for the Latin-1 characters."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "casing    how casing is handled."}], "parameterName": "casing", "parameterComment": "how casing is handled. {@link Case#INSENSITIVE} works only for the Latin-1 characters.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, java.lang.String[], io.realm.Case)", "flatSignature": "(String, String[], Case)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "In comparison. This allows you to test if objects match any value in an array of values.", "name": "in", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 568, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "values    array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "array of values to compare with. If "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the empty array is provided the query will never\n                  match any results."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "values    array of values to compare with."}], "parameterName": "values", "parameterComment": "array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison. This allows you to test if objects match any value in an array of values.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison. This allows you to test if objects match any value in an array of values."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.in", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "java.lang.Byte[]", "typeName": "Byte", "qualifiedTypeName": "java.lang.Byte", "simpleTypeName": "Byte", "dimension": "[]", "isPrimitive": false, "elementType": {"_class": "ClassDoc", "asString": "java.lang.Byte", "typeName": "Byte", "qualifiedTypeName": "java.lang.Byte", "simpleTypeName": "Byte", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "isClass": false, "isAnnotationType": false}, "name": "values", "typeName": "java.lang.Byte[]", "asString": "java.lang.Byte[] values", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}]}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field isn't a Byte field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field isn't a Byte field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field isn't a Byte field."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field isn't a Byte field.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "values    array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "array of values to compare with. If "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the empty array is provided the query will never\n                  match any results."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "values    array of values to compare with."}], "parameterName": "values", "parameterComment": "array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, java.lang.Byte[])", "flatSignature": "(String, Byte[])", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "In comparison. This allows you to test if objects match any value in an array of values.", "name": "in", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 592, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "values    array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "array of values to compare with. If "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the empty array is provided the query will never\n                  match any results."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "values    array of values to compare with."}], "parameterName": "values", "parameterComment": "array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison. This allows you to test if objects match any value in an array of values.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison. This allows you to test if objects match any value in an array of values."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.in", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "java.lang.Short[]", "typeName": "Short", "qualifiedTypeName": "java.lang.Short", "simpleTypeName": "Short", "dimension": "[]", "isPrimitive": false, "elementType": {"_class": "ClassDoc", "asString": "java.lang.Short", "typeName": "Short", "qualifiedTypeName": "java.lang.Short", "simpleTypeName": "Short", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "isClass": false, "isAnnotationType": false}, "name": "values", "typeName": "java.lang.Short[]", "asString": "java.lang.Short[] values", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}]}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field isn't a Short field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field isn't a Short field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field isn't a Short field."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field isn't a Short field.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "values    array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "array of values to compare with. If "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the empty array is provided the query will never\n                  match any results."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "values    array of values to compare with."}], "parameterName": "values", "parameterComment": "array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, java.lang.Short[])", "flatSignature": "(String, Short[])", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "In comparison. This allows you to test if objects match any value in an array of values.", "name": "in", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 616, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "values    array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "array of values to compare with. If "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the empty array is provided the query will never\n                  match any results."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "values    array of values to compare with."}], "parameterName": "values", "parameterComment": "array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison. This allows you to test if objects match any value in an array of values.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison. This allows you to test if objects match any value in an array of values."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.in", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "java.lang.Integer[]", "typeName": "Integer", "qualifiedTypeName": "java.lang.Integer", "simpleTypeName": "Integer", "dimension": "[]", "isPrimitive": false, "elementType": {"_class": "ClassDoc", "asString": "java.lang.Integer", "typeName": "Integer", "qualifiedTypeName": "java.lang.Integer", "simpleTypeName": "Integer", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "isClass": false, "isAnnotationType": false}, "name": "values", "typeName": "java.lang.Integer[]", "asString": "java.lang.Integer[] values", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}]}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field isn't a Integer field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field isn't a Integer field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field isn't a Integer field."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field isn't a Integer field.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "values    array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "array of values to compare with. If "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the empty array is provided the query will never\n                  match any results."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "values    array of values to compare with."}], "parameterName": "values", "parameterComment": "array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, java.lang.Integer[])", "flatSignature": "(String, Integer[])", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "In comparison. This allows you to test if objects match any value in an array of values.", "name": "in", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 641, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "values    array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "array of values to compare with. If "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the empty array is provided the query will never\n                  match any results."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "values    array of values to compare with."}], "parameterName": "values", "parameterComment": "array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison. This allows you to test if objects match any value in an array of values.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison. This allows you to test if objects match any value in an array of values."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.in", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "java.lang.Long[]", "typeName": "Long", "qualifiedTypeName": "java.lang.Long", "simpleTypeName": "Long", "dimension": "[]", "isPrimitive": false, "elementType": {"_class": "ClassDoc", "asString": "java.lang.Long", "typeName": "Long", "qualifiedTypeName": "java.lang.Long", "simpleTypeName": "Long", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "isClass": false, "isAnnotationType": false}, "name": "values", "typeName": "java.lang.Long[]", "asString": "java.lang.Long[] values", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}]}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field isn't a Long field.\n                                            empty.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field isn't a Long field.\n                                            empty."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field isn't a Long field."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field isn't a Long field.\n                                            empty.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "values    array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "array of values to compare with. If "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the empty array is provided the query will never\n                  match any results."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "values    array of values to compare with."}], "parameterName": "values", "parameterComment": "array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, java.lang.Long[])", "flatSignature": "(String, Long[])", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "In comparison. This allows you to test if objects match any value in an array of values.", "name": "in", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 666, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "values    array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "array of values to compare with. If "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the empty array is provided the query will never\n                  match any results."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "values    array of values to compare with."}], "parameterName": "values", "parameterComment": "array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison. This allows you to test if objects match any value in an array of values.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison. This allows you to test if objects match any value in an array of values."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.in", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "java.lang.Double[]", "typeName": "Double", "qualifiedTypeName": "java.lang.Double", "simpleTypeName": "Double", "dimension": "[]", "isPrimitive": false, "elementType": {"_class": "ClassDoc", "asString": "java.lang.Double", "typeName": "Double", "qualifiedTypeName": "java.lang.Double", "simpleTypeName": "Double", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "isClass": false, "isAnnotationType": false}, "name": "values", "typeName": "java.lang.Double[]", "asString": "java.lang.Double[] values", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}]}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field isn't a Double field.\n                                            empty.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field isn't a Double field.\n                                            empty."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field isn't a Double field."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field isn't a Double field.\n                                            empty.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "values    array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "array of values to compare with. If "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the empty array is provided the query will never\n                  match any results."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "values    array of values to compare with."}], "parameterName": "values", "parameterComment": "array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, java.lang.Double[])", "flatSignature": "(String, Double[])", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "In comparison. This allows you to test if objects match any value in an array of values.", "name": "in", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 690, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "values    array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "array of values to compare with. If "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the empty array is provided the query will never\n                  match any results."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "values    array of values to compare with."}], "parameterName": "values", "parameterComment": "array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison. This allows you to test if objects match any value in an array of values.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison. This allows you to test if objects match any value in an array of values."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.in", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "java.lang.Float[]", "typeName": "Float", "qualifiedTypeName": "java.lang.Float", "simpleTypeName": "Float", "dimension": "[]", "isPrimitive": false, "elementType": {"_class": "ClassDoc", "asString": "java.lang.Float", "typeName": "Float", "qualifiedTypeName": "java.lang.Float", "simpleTypeName": "Float", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "isClass": false, "isAnnotationType": false}, "name": "values", "typeName": "java.lang.Float[]", "asString": "java.lang.Float[] values", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}]}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field isn't a Float field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field isn't a Float field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field isn't a Float field."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field isn't a Float field.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "values    array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "array of values to compare with. If "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the empty array is provided the query will never\n                  match any results."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "values    array of values to compare with."}], "parameterName": "values", "parameterComment": "array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, java.lang.Float[])", "flatSignature": "(String, Float[])", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "In comparison. This allows you to test if objects match any value in an array of values.", "name": "in", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 715, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "values    array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "array of values to compare with. If "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the empty array is provided the query will never\n                  match any results."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "values    array of values to compare with."}], "parameterName": "values", "parameterComment": "array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison. This allows you to test if objects match any value in an array of values.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison. This allows you to test if objects match any value in an array of values."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.in", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "java.lang.Boolean[]", "typeName": "Boolean", "qualifiedTypeName": "java.lang.Boolean", "simpleTypeName": "Boolean", "dimension": "[]", "isPrimitive": false, "elementType": {"_class": "ClassDoc", "asString": "java.lang.Boolean", "typeName": "Boolean", "qualifiedTypeName": "java.lang.Boolean", "simpleTypeName": "Boolean", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "isClass": false, "isAnnotationType": false}, "name": "values", "typeName": "java.lang.Boolean[]", "asString": "java.lang.Boolean[] values", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}]}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field isn't a Boolean.\n                                            or empty.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field isn't a Boolean.\n                                            or empty."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field isn't a Boolean."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field isn't a Boolean.\n                                            or empty.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "values    array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "array of values to compare with. If "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the empty array is provided the query will never\n                  match any results."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "values    array of values to compare with."}], "parameterName": "values", "parameterComment": "array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, java.lang.Boolean[])", "flatSignature": "(String, Boolean[])", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "In comparison. This allows you to test if objects match any value in an array of values.", "name": "in", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 739, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "values    array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "array of values to compare with. If "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the empty array is provided the query will never\n                  match any results."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "values    array of values to compare with."}], "parameterName": "values", "parameterComment": "array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison. This allows you to test if objects match any value in an array of values.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison. This allows you to test if objects match any value in an array of values."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.in", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "java.util.Date[]", "typeName": "Date", "qualifiedTypeName": "java.util.Date", "simpleTypeName": "Date", "dimension": "[]", "isPrimitive": false, "elementType": {"_class": "ClassDoc", "asString": "java.util.Date", "typeName": "Date", "qualifiedTypeName": "java.util.Date", "simpleTypeName": "Date", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "isClass": false, "isAnnotationType": false}, "name": "values", "typeName": "java.util.Date[]", "asString": "java.util.Date[] values", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}]}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field isn't a Date field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field isn't a Date field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field isn't a Date field."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field isn't a Date field.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "values    array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "array of values to compare with. If "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the empty array is provided the query will never\n                  match any results."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "values    array of values to compare with."}], "parameterName": "values", "parameterComment": "array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, java.util.Date[])", "flatSignature": "(String, Date[])", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "In comparison. This allows you to test if objects match any value in an array of values.", "name": "in", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 763, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "values    array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "array of values to compare with. If "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the empty array is provided the query will never\n                  match any results."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "values    array of values to compare with."}], "parameterName": "values", "parameterComment": "array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison. This allows you to test if objects match any value in an array of values.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison. This allows you to test if objects match any value in an array of values."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.in", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "RealmAny[]", "typeName": "RealmAny", "qualifiedTypeName": "RealmAny", "simpleTypeName": "RealmAny", "dimension": "[]", "isPrimitive": false, "elementType": {"_class": "ClassDoc", "asString": "RealmAny", "typeName": "RealmAny", "qualifiedTypeName": "RealmAny", "simpleTypeName": "RealmAny", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "isClass": false, "isAnnotationType": false}, "name": "values", "typeName": "RealmAny[]", "asString": "RealmAny[] values", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field isn't a Date field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field isn't a Date field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field isn't a Date field."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field isn't a Date field.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "values    array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "array of values to compare with. If "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the empty array is provided the query will never\n                  match any results."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "values    array of values to compare with."}], "parameterName": "values", "parameterComment": "array of values to compare with. If {@code null} or the empty array is provided the query will never\n                  match any results.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, RealmAny[])", "flatSignature": "(String, RealmAny[])", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Not-equal-to comparison.", "name": "notEqualTo", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 787, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Not-equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Not-equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Not-equal-to comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Not-equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Not-equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Not-equal-to comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.notEqualTo", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "value", "typeName": "String", "asString": "String value", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}]}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, java.lang.String)", "flatSignature": "(String, String)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Not-equal-to comparison.", "name": "notEqualTo", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 800, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "casing    how casing is handled. {@link Case#INSENSITIVE} works only for the Latin-1 characters.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "how casing is handled. "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Case#INSENSITIVE", "label": "", "referencedClassName": "io.realm.Case", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Case", "typeName": "Case", "qualifiedTypeName": "io.realm.Case", "simpleTypeName": "Case", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public final"}, "referencedMemberName": "INSENSITIVE"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " works only for the Latin-1 characters."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "casing    how casing is handled."}], "parameterName": "casing", "parameterComment": "how casing is handled. {@link Case#INSENSITIVE} works only for the Latin-1 characters.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Not-equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Not-equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Not-equal-to comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Not-equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Not-equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Not-equal-to comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.notEqualTo", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "value", "typeName": "String", "asString": "String value", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}]}, {"type": {"_class": "ClassDoc", "asString": "io.realm.Case", "typeName": "Case", "qualifiedTypeName": "io.realm.Case", "simpleTypeName": "Case", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "casing", "typeName": "Case", "asString": "Case casing", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "casing    how casing is handled. {@link Case#INSENSITIVE} works only for the Latin-1 characters.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "how casing is handled. "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Case#INSENSITIVE", "label": "", "referencedClassName": "io.realm.Case", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Case", "typeName": "Case", "qualifiedTypeName": "io.realm.Case", "simpleTypeName": "Case", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public final"}, "referencedMemberName": "INSENSITIVE"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " works only for the Latin-1 characters."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "casing    how casing is handled."}], "parameterName": "casing", "parameterComment": "how casing is handled. {@link Case#INSENSITIVE} works only for the Latin-1 characters.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, java.lang.String, io.realm.Case)", "flatSignature": "(String, String, Case)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Not-equal-to comparison.", "name": "notEqualTo", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 815, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "casing    how casing is handled. {@link Case#INSENSITIVE} works only for the Latin-1 characters.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "how casing is handled. "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Case#INSENSITIVE", "label": "", "referencedClassName": "io.realm.Case", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Case", "typeName": "Case", "qualifiedTypeName": "io.realm.Case", "simpleTypeName": "Case", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public final"}, "referencedMemberName": "INSENSITIVE"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " works only for the Latin-1 characters."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "casing    how casing is handled."}], "parameterName": "casing", "parameterComment": "how casing is handled. {@link Case#INSENSITIVE} works only for the Latin-1 characters.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Not-equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Not-equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Not-equal-to comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Not-equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Not-equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Not-equal-to comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.notEqualTo", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "RealmAny", "typeName": "RealmAny", "qualifiedTypeName": "RealmAny", "simpleTypeName": "RealmAny", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "RealmAny", "asString": "RealmAny value", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "io.realm.Case", "typeName": "Case", "qualifiedTypeName": "io.realm.Case", "simpleTypeName": "Case", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "casing", "typeName": "Case", "asString": "Case casing", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "casing    how casing is handled. {@link Case#INSENSITIVE} works only for the Latin-1 characters.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "how casing is handled. "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Case#INSENSITIVE", "label": "", "referencedClassName": "io.realm.Case", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Case", "typeName": "Case", "qualifiedTypeName": "io.realm.Case", "simpleTypeName": "Case", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public final"}, "referencedMemberName": "INSENSITIVE"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " works only for the Latin-1 characters."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "casing    how casing is handled."}], "parameterName": "casing", "parameterComment": "how casing is handled. {@link Case#INSENSITIVE} works only for the Latin-1 characters.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, RealmAny, io.realm.Case)", "flatSignature": "(String, RealmAny, Case)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Not-equal-to comparison.", "name": "notEqualTo", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 833, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Not-equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Not-equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Not-equal-to comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Not-equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Not-equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Not-equal-to comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.notEqualTo", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "Decimal128", "typeName": "Decimal128", "qualifiedTypeName": "Decimal128", "simpleTypeName": "Decimal128", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "Decimal128", "asString": "Decimal128 value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, Decimal128)", "flatSignature": "(String, Decimal128)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Not-equal-to comparison.", "name": "notEqualTo", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 847, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Not-equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Not-equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Not-equal-to comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Not-equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Not-equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Not-equal-to comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.notEqualTo", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "ObjectId", "typeName": "ObjectId", "qualifiedTypeName": "ObjectId", "simpleTypeName": "ObjectId", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "ObjectId", "asString": "ObjectId value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, ObjectId)", "flatSignature": "(String, ObjectId)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Not-equal-to comparison.", "name": "notEqualTo", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 875, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Not-equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Not-equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Not-equal-to comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Not-equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Not-equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Not-equal-to comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.notEqualTo", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "RealmAny", "typeName": "RealmAny", "qualifiedTypeName": "RealmAny", "simpleTypeName": "RealmAny", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "RealmAny", "asString": "RealmAny value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, RealmAny)", "flatSignature": "(String, RealmAny)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Greater-than comparison.", "name": "greaterThan", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1015, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.greaterThan", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "int", "typeName": "int", "qualifiedTypeName": "int", "simpleTypeName": "int", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "int", "asString": "int value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, int)", "flatSignature": "(String, int)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Greater-than comparison.", "name": "greaterThan", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1029, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.greaterThan", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "long", "typeName": "long", "qualifiedTypeName": "long", "simpleTypeName": "long", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "long", "asString": "long value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, long)", "flatSignature": "(String, long)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Greater-than comparison.", "name": "greaterThan", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1043, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.greaterThan", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "double", "typeName": "double", "qualifiedTypeName": "double", "simpleTypeName": "double", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "double", "asString": "double value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, double)", "flatSignature": "(String, double)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Greater-than comparison.", "name": "greaterThan", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1057, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.greaterThan", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "float", "typeName": "float", "qualifiedTypeName": "float", "simpleTypeName": "float", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "float", "asString": "float value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, float)", "flatSignature": "(String, float)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Greater-than comparison.", "name": "greaterThan", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1071, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.greaterThan", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "java.util.Date", "typeName": "Date", "qualifiedTypeName": "java.util.Date", "simpleTypeName": "Date", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "value", "typeName": "Date", "asString": "Date value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, java.util.Date)", "flatSignature": "(String, Date)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Greater-than comparison.", "name": "greaterThan", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1085, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.greaterThan", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "RealmAny", "typeName": "RealmAny", "qualifiedTypeName": "RealmAny", "simpleTypeName": "RealmAny", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "RealmAny", "asString": "RealmAny value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, RealmAny)", "flatSignature": "(String, RealmAny)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Greater-than comparison.", "name": "greaterThan", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1099, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.greaterThan", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "Decimal128", "typeName": "Decimal128", "qualifiedTypeName": "Decimal128", "simpleTypeName": "Decimal128", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "Decimal128", "asString": "Decimal128 value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, Decimal128)", "flatSignature": "(String, Decimal128)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Greater-than comparison.", "name": "greaterThan", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1113, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.greaterThan", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "ObjectId", "typeName": "ObjectId", "qualifiedTypeName": "ObjectId", "simpleTypeName": "ObjectId", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "ObjectId", "asString": "ObjectId value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, ObjectId)", "flatSignature": "(String, ObjectId)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Greater-than-or-equal-to comparison.", "name": "greaterThanOrEqualTo", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1141, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.greaterThanOrEqualTo", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "int", "typeName": "int", "qualifiedTypeName": "int", "simpleTypeName": "int", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "int", "asString": "int value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, int)", "flatSignature": "(String, int)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Greater-than-or-equal-to comparison.", "name": "greaterThanOrEqualTo", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1155, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.greaterThanOrEqualTo", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "long", "typeName": "long", "qualifiedTypeName": "long", "simpleTypeName": "long", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "long", "asString": "long value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, long)", "flatSignature": "(String, long)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Greater-than-or-equal-to comparison.", "name": "greaterThanOrEqualTo", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1169, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.greaterThanOrEqualTo", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "double", "typeName": "double", "qualifiedTypeName": "double", "simpleTypeName": "double", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "double", "asString": "double value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, double)", "flatSignature": "(String, double)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Greater-than-or-equal-to comparison.", "name": "greaterThanOrEqualTo", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1183, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.greaterThanOrEqualTo", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "float", "typeName": "float", "qualifiedTypeName": "float", "simpleTypeName": "float", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "float", "asString": "float value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type"}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, float)", "flatSignature": "(String, float)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Greater-than-or-equal-to comparison.", "name": "greaterThanOrEqualTo", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1197, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.greaterThanOrEqualTo", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "java.util.Date", "typeName": "Date", "qualifiedTypeName": "java.util.Date", "simpleTypeName": "Date", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "value", "typeName": "Date", "asString": "Date value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, java.util.Date)", "flatSignature": "(String, Date)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Greater-than-or-equal-to comparison.", "name": "greaterThanOrEqualTo", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1211, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.greaterThanOrEqualTo", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "Decimal128", "typeName": "Decimal128", "qualifiedTypeName": "Decimal128", "simpleTypeName": "Decimal128", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "Decimal128", "asString": "Decimal128 value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, Decimal128)", "flatSignature": "(String, Decimal128)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Greater-than-or-equal-to comparison.", "name": "greaterThanOrEqualTo", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1225, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.greaterThanOrEqualTo", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "ObjectId", "typeName": "ObjectId", "qualifiedTypeName": "ObjectId", "simpleTypeName": "ObjectId", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "ObjectId", "asString": "ObjectId value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, ObjectId)", "flatSignature": "(String, ObjectId)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Greater-than-or-equal-to comparison.", "name": "greaterThanOrEqualTo", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1253, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Greater-than-or-equal-to comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.greaterThanOrEqualTo", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "RealmAny", "typeName": "RealmAny", "qualifiedTypeName": "RealmAny", "simpleTypeName": "RealmAny", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "RealmAny", "asString": "RealmAny value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, RealmAny)", "flatSignature": "(String, RealmAny)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Less-than comparison.", "name": "lessThan", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1267, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.lessThan", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "int", "typeName": "int", "qualifiedTypeName": "int", "simpleTypeName": "int", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "int", "asString": "int value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, int)", "flatSignature": "(String, int)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Less-than comparison.", "name": "lessThan", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1281, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.lessThan", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "long", "typeName": "long", "qualifiedTypeName": "long", "simpleTypeName": "long", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "long", "asString": "long value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, long)", "flatSignature": "(String, long)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Less-than comparison.", "name": "lessThan", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1295, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.lessThan", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "Decimal128", "typeName": "Decimal128", "qualifiedTypeName": "Decimal128", "simpleTypeName": "Decimal128", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "Decimal128", "asString": "Decimal128 value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, Decimal128)", "flatSignature": "(String, Decimal128)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Less-than comparison.", "name": "lessThan", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1309, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.lessThan", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "ObjectId", "typeName": "ObjectId", "qualifiedTypeName": "ObjectId", "simpleTypeName": "ObjectId", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "ObjectId", "asString": "ObjectId value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, ObjectId)", "flatSignature": "(String, ObjectId)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Less-than comparison.", "name": "lessThan", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1379, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.lessThan", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "RealmAny", "typeName": "RealmAny", "qualifiedTypeName": "RealmAny", "simpleTypeName": "RealmAny", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "RealmAny", "asString": "RealmAny value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, RealmAny)", "flatSignature": "(String, RealmAny)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Less-than-or-equal-to comparison.", "name": "lessThanOrEqualTo", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1393, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than-or-equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than-or-equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than-or-equal-to comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than-or-equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than-or-equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than-or-equal-to comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.lessThanOrEqualTo", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "int", "typeName": "int", "qualifiedTypeName": "int", "simpleTypeName": "int", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "int", "asString": "int value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, int)", "flatSignature": "(String, int)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Less-than-or-equal-to comparison.", "name": "lessThanOrEqualTo", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1407, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than-or-equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than-or-equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than-or-equal-to comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than-or-equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than-or-equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than-or-equal-to comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.lessThanOrEqualTo", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "long", "typeName": "long", "qualifiedTypeName": "long", "simpleTypeName": "long", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "long", "asString": "long value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, long)", "flatSignature": "(String, long)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Less-than-or-equal-to comparison.", "name": "lessThanOrEqualTo", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1421, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than-or-equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than-or-equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than-or-equal-to comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than-or-equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than-or-equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than-or-equal-to comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.lessThanOrEqualTo", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "Decimal128", "typeName": "Decimal128", "qualifiedTypeName": "Decimal128", "simpleTypeName": "Decimal128", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "Decimal128", "asString": "Decimal128 value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, Decimal128)", "flatSignature": "(String, Decimal128)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Less-than-or-equal-to comparison.", "name": "lessThanOrEqualTo", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1435, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than-or-equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than-or-equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than-or-equal-to comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than-or-equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than-or-equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than-or-equal-to comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.lessThanOrEqualTo", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "ObjectId", "typeName": "ObjectId", "qualifiedTypeName": "ObjectId", "simpleTypeName": "ObjectId", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "ObjectId", "asString": "ObjectId value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, ObjectId)", "flatSignature": "(String, ObjectId)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Less-than-or-equal-to comparison.", "name": "lessThanOrEqualTo", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1505, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than-or-equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than-or-equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than-or-equal-to comparison."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than-or-equal-to comparison.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than-or-equal-to comparison."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Less-than-or-equal-to comparison."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.lessThanOrEqualTo", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "RealmAny", "typeName": "RealmAny", "qualifiedTypeName": "RealmAny", "simpleTypeName": "RealmAny", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "RealmAny", "asString": "RealmAny value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to compare with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to compare with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to compare with."}], "parameterName": "value", "parameterComment": "the value to compare with.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, RealmAny)", "flatSignature": "(String, RealmAny)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Between condition.", "name": "between", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1520, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "from      lowest value (inclusive).", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "lowest value (inclusive)."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "from      lowest value (inclusive)."}], "parameterName": "from", "parameterComment": "lowest value (inclusive).", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "to        highest value (inclusive).", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "highest value (inclusive)."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "to        highest value (inclusive)."}], "parameterName": "to", "parameterComment": "highest value (inclusive).", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.between", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "int", "typeName": "int", "qualifiedTypeName": "int", "simpleTypeName": "int", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "from", "typeName": "int", "asString": "int from", "annotations": []}, {"type": {"_class": "Type", "asString": "int", "typeName": "int", "qualifiedTypeName": "int", "simpleTypeName": "int", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "to", "typeName": "int", "asString": "int to", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "from      lowest value (inclusive).", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "lowest value (inclusive)."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "from      lowest value (inclusive)."}], "parameterName": "from", "parameterComment": "lowest value (inclusive).", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "to        highest value (inclusive).", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "highest value (inclusive)."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "to        highest value (inclusive)."}], "parameterName": "to", "parameterComment": "highest value (inclusive).", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, int, int)", "flatSignature": "(String, int, int)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Between condition.", "name": "between", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1535, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "from      lowest value (inclusive).", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "lowest value (inclusive)."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "from      lowest value (inclusive)."}], "parameterName": "from", "parameterComment": "lowest value (inclusive).", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "to        highest value (inclusive).", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "highest value (inclusive)."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "to        highest value (inclusive)."}], "parameterName": "to", "parameterComment": "highest value (inclusive).", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.between", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "long", "typeName": "long", "qualifiedTypeName": "long", "simpleTypeName": "long", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "from", "typeName": "long", "asString": "long from", "annotations": []}, {"type": {"_class": "Type", "asString": "long", "typeName": "long", "qualifiedTypeName": "long", "simpleTypeName": "long", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "to", "typeName": "long", "asString": "long to", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "from      lowest value (inclusive).", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "lowest value (inclusive)."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "from      lowest value (inclusive)."}], "parameterName": "from", "parameterComment": "lowest value (inclusive).", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "to        highest value (inclusive).", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "highest value (inclusive)."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "to        highest value (inclusive)."}], "parameterName": "to", "parameterComment": "highest value (inclusive).", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, long, long)", "flatSignature": "(String, long, long)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Between condition.", "name": "between", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1550, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "from      lowest value (inclusive).", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "lowest value (inclusive)."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "from      lowest value (inclusive)."}], "parameterName": "from", "parameterComment": "lowest value (inclusive).", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "to        highest value (inclusive).", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "highest value (inclusive)."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "to        highest value (inclusive)."}], "parameterName": "to", "parameterComment": "highest value (inclusive).", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.between", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "double", "typeName": "double", "qualifiedTypeName": "double", "simpleTypeName": "double", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "from", "typeName": "double", "asString": "double from", "annotations": []}, {"type": {"_class": "Type", "asString": "double", "typeName": "double", "qualifiedTypeName": "double", "simpleTypeName": "double", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "to", "typeName": "double", "asString": "double to", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "from      lowest value (inclusive).", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "lowest value (inclusive)."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "from      lowest value (inclusive)."}], "parameterName": "from", "parameterComment": "lowest value (inclusive).", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "to        highest value (inclusive).", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "highest value (inclusive)."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "to        highest value (inclusive)."}], "parameterName": "to", "parameterComment": "highest value (inclusive).", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, double, double)", "flatSignature": "(String, double, double)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Between condition.", "name": "between", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1565, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "from      lowest value (inclusive).", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "lowest value (inclusive)."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "from      lowest value (inclusive)."}], "parameterName": "from", "parameterComment": "lowest value (inclusive).", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "to        highest value (inclusive).", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "highest value (inclusive)."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "to        highest value (inclusive)."}], "parameterName": "to", "parameterComment": "highest value (inclusive).", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.between", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "float", "typeName": "float", "qualifiedTypeName": "float", "simpleTypeName": "float", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "from", "typeName": "float", "asString": "float from", "annotations": []}, {"type": {"_class": "Type", "asString": "float", "typeName": "float", "qualifiedTypeName": "float", "simpleTypeName": "float", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "to", "typeName": "float", "asString": "float to", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "from      lowest value (inclusive).", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "lowest value (inclusive)."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "from      lowest value (inclusive)."}], "parameterName": "from", "parameterComment": "lowest value (inclusive).", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "to        highest value (inclusive).", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "highest value (inclusive)."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "to        highest value (inclusive)."}], "parameterName": "to", "parameterComment": "highest value (inclusive).", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, float, float)", "flatSignature": "(String, float, float)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Between condition.", "name": "between", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1580, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "from      lowest value (inclusive).", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "lowest value (inclusive)."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "from      lowest value (inclusive)."}], "parameterName": "from", "parameterComment": "lowest value (inclusive).", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "to        highest value (inclusive).", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "highest value (inclusive)."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "to        highest value (inclusive)."}], "parameterName": "to", "parameterComment": "highest value (inclusive).", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.between", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "java.util.Date", "typeName": "Date", "qualifiedTypeName": "java.util.Date", "simpleTypeName": "Date", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "from", "typeName": "Date", "asString": "Date from", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "java.util.Date", "typeName": "Date", "qualifiedTypeName": "java.util.Date", "simpleTypeName": "Date", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "to", "typeName": "Date", "asString": "Date to", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "from      lowest value (inclusive).", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "lowest value (inclusive)."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "from      lowest value (inclusive)."}], "parameterName": "from", "parameterComment": "lowest value (inclusive).", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "to        highest value (inclusive).", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "highest value (inclusive)."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "to        highest value (inclusive)."}], "parameterName": "to", "parameterComment": "highest value (inclusive).", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, java.util.Date, java.util.Date)", "flatSignature": "(String, Date, Date)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Between condition.", "name": "between", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1595, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "from      lowest value (inclusive).", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "lowest value (inclusive)."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "from      lowest value (inclusive)."}], "parameterName": "from", "parameterComment": "lowest value (inclusive).", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "to        highest value (inclusive).", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "highest value (inclusive)."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "to        highest value (inclusive)."}], "parameterName": "to", "parameterComment": "highest value (inclusive).", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.between", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "RealmAny", "typeName": "RealmAny", "qualifiedTypeName": "RealmAny", "simpleTypeName": "RealmAny", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "from", "typeName": "RealmAny", "asString": "RealmAny from", "annotations": []}, {"type": {"_class": "Type", "asString": "RealmAny", "typeName": "RealmAny", "qualifiedTypeName": "RealmAny", "simpleTypeName": "RealmAny", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "to", "typeName": "RealmAny", "asString": "RealmAny to", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "from      lowest value (inclusive).", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "lowest value (inclusive)."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "from      lowest value (inclusive)."}], "parameterName": "from", "parameterComment": "lowest value (inclusive).", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "to        highest value (inclusive).", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "highest value (inclusive)."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "to        highest value (inclusive)."}], "parameterName": "to", "parameterComment": "highest value (inclusive).", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, RealmAny, RealmAny)", "flatSignature": "(String, RealmAny, RealmAny)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Between condition.", "name": "between", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1610, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "from      lowest value (inclusive).", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "lowest value (inclusive)."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "from      lowest value (inclusive)."}], "parameterName": "from", "parameterComment": "lowest value (inclusive).", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "to        highest value (inclusive).", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "highest value (inclusive)."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "to        highest value (inclusive)."}], "parameterName": "to", "parameterComment": "highest value (inclusive).", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Between condition."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.between", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "Decimal128", "typeName": "Decimal128", "qualifiedTypeName": "Decimal128", "simpleTypeName": "Decimal128", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "from", "typeName": "Decimal128", "asString": "Decimal128 from", "annotations": []}, {"type": {"_class": "Type", "asString": "Decimal128", "typeName": "Decimal128", "qualifiedTypeName": "Decimal128", "simpleTypeName": "Decimal128", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "to", "typeName": "Decimal128", "asString": "Decimal128 to", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "from      lowest value (inclusive).", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "lowest value (inclusive)."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "from      lowest value (inclusive)."}], "parameterName": "from", "parameterComment": "lowest value (inclusive).", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "to        highest value (inclusive).", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "highest value (inclusive)."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "to        highest value (inclusive)."}], "parameterName": "to", "parameterComment": "highest value (inclusive).", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, Decimal128, Decimal128)", "flatSignature": "(String, Decimal128, Decimal128)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Condition that value of field contains the specified substring.", "name": "contains", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1624, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the substring.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the substring."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the substring."}], "parameterName": "value", "parameterComment": "the substring.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value of field contains the specified substring.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value of field contains the specified substring."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value of field contains the specified substring."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value of field contains the specified substring.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value of field contains the specified substring."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value of field contains the specified substring."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.contains", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "value", "typeName": "String", "asString": "String value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the substring.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the substring."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the substring."}], "parameterName": "value", "parameterComment": "the substring.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, java.lang.String)", "flatSignature": "(String, String)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Condition that value of field contains the specified substring.", "name": "contains", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1636, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the substring.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the substring."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the substring."}], "parameterName": "value", "parameterComment": "the substring.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value of field contains the specified substring.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value of field contains the specified substring."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value of field contains the specified substring."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value of field contains the specified substring.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value of field contains the specified substring."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value of field contains the specified substring."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.contains", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "RealmAny", "typeName": "RealmAny", "qualifiedTypeName": "RealmAny", "simpleTypeName": "RealmAny", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "RealmAny", "asString": "RealmAny value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the substring.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the substring."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the substring."}], "parameterName": "value", "parameterComment": "the substring.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, RealmAny)", "flatSignature": "(String, RealmAny)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Condition that value of field contains the specified substring.", "name": "contains", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1649, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "The query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "The query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "The query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the substring.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the substring."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the substring."}], "parameterName": "value", "parameterComment": "the substring.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "casing    how to handle casing. Setting this to {@link Case#INSENSITIVE} only works for Latin-1 characters.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "how to handle casing. Setting this to "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Case#INSENSITIVE", "label": "", "referencedClassName": "io.realm.Case", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Case", "typeName": "Case", "qualifiedTypeName": "io.realm.Case", "simpleTypeName": "Case", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public final"}, "referencedMemberName": "INSENSITIVE"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " only works for Latin-1 characters."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "casing    how to handle casing."}], "parameterName": "casing", "parameterComment": "how to handle casing. Setting this to {@link Case#INSENSITIVE} only works for Latin-1 characters.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value of field contains the specified substring.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value of field contains the specified substring."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value of field contains the specified substring."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value of field contains the specified substring.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value of field contains the specified substring."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value of field contains the specified substring."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.contains", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "value", "typeName": "String", "asString": "String value", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "io.realm.Case", "typeName": "Case", "qualifiedTypeName": "io.realm.Case", "simpleTypeName": "Case", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "casing", "typeName": "Case", "asString": "Case casing", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the substring.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the substring."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the substring."}], "parameterName": "value", "parameterComment": "the substring.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "casing    how to handle casing. Setting this to {@link Case#INSENSITIVE} only works for Latin-1 characters.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "how to handle casing. Setting this to "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Case#INSENSITIVE", "label": "", "referencedClassName": "io.realm.Case", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Case", "typeName": "Case", "qualifiedTypeName": "io.realm.Case", "simpleTypeName": "Case", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public final"}, "referencedMemberName": "INSENSITIVE"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " only works for Latin-1 characters."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "casing    how to handle casing."}], "parameterName": "casing", "parameterComment": "how to handle casing. Setting this to {@link Case#INSENSITIVE} only works for Latin-1 characters.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, java.lang.String, io.realm.Case)", "flatSignature": "(String, String, Case)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Condition that value of field contains the specified substring.", "name": "contains", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1665, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "The query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "The query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "The query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the substring.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the substring."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the substring."}], "parameterName": "value", "parameterComment": "the substring.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "casing    how to handle casing. Setting this to {@link Case#INSENSITIVE} only works for Latin-1 characters.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "how to handle casing. Setting this to "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Case#INSENSITIVE", "label": "", "referencedClassName": "io.realm.Case", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Case", "typeName": "Case", "qualifiedTypeName": "io.realm.Case", "simpleTypeName": "Case", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public final"}, "referencedMemberName": "INSENSITIVE"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " only works for Latin-1 characters."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "casing    how to handle casing."}], "parameterName": "casing", "parameterComment": "how to handle casing. Setting this to {@link Case#INSENSITIVE} only works for Latin-1 characters.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value of field contains the specified substring.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value of field contains the specified substring."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value of field contains the specified substring."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value of field contains the specified substring.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value of field contains the specified substring."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value of field contains the specified substring."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.contains", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "RealmAny", "typeName": "RealmAny", "qualifiedTypeName": "RealmAny", "simpleTypeName": "RealmAny", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "RealmAny", "asString": "RealmAny value", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "io.realm.Case", "typeName": "Case", "qualifiedTypeName": "io.realm.Case", "simpleTypeName": "Case", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "casing", "typeName": "Case", "asString": "Case casing", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the substring.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the substring."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the substring."}], "parameterName": "value", "parameterComment": "the substring.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "casing    how to handle casing. Setting this to {@link Case#INSENSITIVE} only works for Latin-1 characters.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "how to handle casing. Setting this to "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Case#INSENSITIVE", "label": "", "referencedClassName": "io.realm.Case", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Case", "typeName": "Case", "qualifiedTypeName": "io.realm.Case", "simpleTypeName": "Case", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public final"}, "referencedMemberName": "INSENSITIVE"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " only works for Latin-1 characters."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "casing    how to handle casing."}], "parameterName": "casing", "parameterComment": "how to handle casing. Setting this to {@link Case#INSENSITIVE} only works for Latin-1 characters.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, RealmAny, io.realm.Case)", "flatSignature": "(String, RealmAny, Case)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Condition that the value of field begins with the specified string.", "name": "beginsWith", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1683, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the string.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the string."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the string."}], "parameterName": "value", "parameterComment": "the string.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field begins with the specified string.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field begins with the specified string."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field begins with the specified string."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field begins with the specified string.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field begins with the specified string."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field begins with the specified string."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.beginsWith", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "value", "typeName": "String", "asString": "String value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the string.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the string."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the string."}], "parameterName": "value", "parameterComment": "the string.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, java.lang.String)", "flatSignature": "(String, String)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Condition that the value of field begins with the specified string.", "name": "beginsWith", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1695, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the string.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the string."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the string."}], "parameterName": "value", "parameterComment": "the string.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field begins with the specified string.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field begins with the specified string."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field begins with the specified string."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field begins with the specified string.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field begins with the specified string."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field begins with the specified string."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.beginsWith", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "RealmAny", "typeName": "RealmAny", "qualifiedTypeName": "RealmAny", "simpleTypeName": "RealmAny", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "RealmAny", "asString": "RealmAny value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the string.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the string."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the string."}], "parameterName": "value", "parameterComment": "the string.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, RealmAny)", "flatSignature": "(String, RealmAny)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Condition that the value of field begins with the specified substring.", "name": "beginsWith", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1708, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object"}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the substring.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the substring."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the substring."}], "parameterName": "value", "parameterComment": "the substring.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "casing    how to handle casing. Setting this to {@link Case#INSENSITIVE} only works for Latin-1 characters.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "how to handle casing. Setting this to "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Case#INSENSITIVE", "label": "", "referencedClassName": "io.realm.Case", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Case", "typeName": "Case", "qualifiedTypeName": "io.realm.Case", "simpleTypeName": "Case", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public final"}, "referencedMemberName": "INSENSITIVE"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " only works for Latin-1 characters."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "casing    how to handle casing."}], "parameterName": "casing", "parameterComment": "how to handle casing. Setting this to {@link Case#INSENSITIVE} only works for Latin-1 characters.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field begins with the specified substring.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field begins with the specified substring."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field begins with the specified substring."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field begins with the specified substring.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field begins with the specified substring."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field begins with the specified substring."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.beginsWith", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "value", "typeName": "String", "asString": "String value", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "io.realm.Case", "typeName": "Case", "qualifiedTypeName": "io.realm.Case", "simpleTypeName": "Case", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "casing", "typeName": "Case", "asString": "Case casing", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the substring.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the substring."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the substring."}], "parameterName": "value", "parameterComment": "the substring.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "casing    how to handle casing. Setting this to {@link Case#INSENSITIVE} only works for Latin-1 characters.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "how to handle casing. Setting this to "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Case#INSENSITIVE", "label": "", "referencedClassName": "io.realm.Case", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Case", "typeName": "Case", "qualifiedTypeName": "io.realm.Case", "simpleTypeName": "Case", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public final"}, "referencedMemberName": "INSENSITIVE"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " only works for Latin-1 characters."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "casing    how to handle casing."}], "parameterName": "casing", "parameterComment": "how to handle casing. Setting this to {@link Case#INSENSITIVE} only works for Latin-1 characters.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, java.lang.String, io.realm.Case)", "flatSignature": "(String, String, Case)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Condition that the value of field begins with the specified substring.", "name": "beginsWith", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1724, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object"}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the substring.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the substring."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the substring."}], "parameterName": "value", "parameterComment": "the substring.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "casing    how to handle casing. Setting this to {@link Case#INSENSITIVE} only works for Latin-1 characters.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "how to handle casing. Setting this to "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Case#INSENSITIVE", "label": "", "referencedClassName": "io.realm.Case", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Case", "typeName": "Case", "qualifiedTypeName": "io.realm.Case", "simpleTypeName": "Case", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public final"}, "referencedMemberName": "INSENSITIVE"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " only works for Latin-1 characters."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "casing    how to handle casing."}], "parameterName": "casing", "parameterComment": "how to handle casing. Setting this to {@link Case#INSENSITIVE} only works for Latin-1 characters.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field begins with the specified substring.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field begins with the specified substring."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field begins with the specified substring."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field begins with the specified substring.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field begins with the specified substring."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field begins with the specified substring."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.beginsWith", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "RealmAny", "typeName": "RealmAny", "qualifiedTypeName": "RealmAny", "simpleTypeName": "RealmAny", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "RealmAny", "asString": "RealmAny value", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "io.realm.Case", "typeName": "Case", "qualifiedTypeName": "io.realm.Case", "simpleTypeName": "Case", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "casing", "typeName": "Case", "asString": "Case casing", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the substring.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the substring."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the substring."}], "parameterName": "value", "parameterComment": "the substring.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "casing    how to handle casing. Setting this to {@link Case#INSENSITIVE} only works for Latin-1 characters.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "how to handle casing. Setting this to "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Case#INSENSITIVE", "label": "", "referencedClassName": "io.realm.Case", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Case", "typeName": "Case", "qualifiedTypeName": "io.realm.Case", "simpleTypeName": "Case", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public final"}, "referencedMemberName": "INSENSITIVE"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " only works for Latin-1 characters."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "casing    how to handle casing."}], "parameterName": "casing", "parameterComment": "how to handle casing. Setting this to {@link Case#INSENSITIVE} only works for Latin-1 characters.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, RealmAny, io.realm.Case)", "flatSignature": "(String, RealmAny, Case)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Condition that the value of field ends with the specified string.", "name": "endsWith", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1742, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the string.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the string."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the string."}], "parameterName": "value", "parameterComment": "the string.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field ends with the specified string.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field ends with the specified string."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field ends with the specified string."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field ends with the specified string.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field ends with the specified string."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field ends with the specified string."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.endsWith", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "value", "typeName": "String", "asString": "String value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the string.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the string."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the string."}], "parameterName": "value", "parameterComment": "the string.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, java.lang.String)", "flatSignature": "(String, String)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Condition that the value of field ends with the specified string.", "name": "endsWith", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1754, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the string.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the string."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the string."}], "parameterName": "value", "parameterComment": "the string.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field ends with the specified string.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field ends with the specified string."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field ends with the specified string."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field ends with the specified string.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field ends with the specified string."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field ends with the specified string."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.endsWith", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "RealmAny", "typeName": "RealmAny", "qualifiedTypeName": "RealmAny", "simpleTypeName": "RealmAny", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "RealmAny", "asString": "RealmAny value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the string.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the string."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the string."}], "parameterName": "value", "parameterComment": "the string.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, RealmAny)", "flatSignature": "(String, RealmAny)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Condition that the value of field ends with the specified substring.", "name": "endsWith", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1767, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the substring.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the substring."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the substring."}], "parameterName": "value", "parameterComment": "the substring.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "casing    how to handle casing. Setting this to {@link Case#INSENSITIVE} only works for Latin-1 characters.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "how to handle casing. Setting this to "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Case#INSENSITIVE", "label": "", "referencedClassName": "io.realm.Case", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Case", "typeName": "Case", "qualifiedTypeName": "io.realm.Case", "simpleTypeName": "Case", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public final"}, "referencedMemberName": "INSENSITIVE"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " only works for Latin-1 characters."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "casing    how to handle casing."}], "parameterName": "casing", "parameterComment": "how to handle casing. Setting this to {@link Case#INSENSITIVE} only works for Latin-1 characters.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field ends with the specified substring.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field ends with the specified substring."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field ends with the specified substring."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field ends with the specified substring.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field ends with the specified substring."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field ends with the specified substring."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.endsWith", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "value", "typeName": "String", "asString": "String value", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "io.realm.Case", "typeName": "Case", "qualifiedTypeName": "io.realm.Case", "simpleTypeName": "Case", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "casing", "typeName": "Case", "asString": "Case casing", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the substring.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the substring."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the substring."}], "parameterName": "value", "parameterComment": "the substring.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "casing    how to handle casing. Setting this to {@link Case#INSENSITIVE} only works for Latin-1 characters.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "how to handle casing. Setting this to "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Case#INSENSITIVE", "label": "", "referencedClassName": "io.realm.Case", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Case", "typeName": "Case", "qualifiedTypeName": "io.realm.Case", "simpleTypeName": "Case", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public final"}, "referencedMemberName": "INSENSITIVE"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " only works for Latin-1 characters."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "casing    how to handle casing."}], "parameterName": "casing", "parameterComment": "how to handle casing. Setting this to {@link Case#INSENSITIVE} only works for Latin-1 characters.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, java.lang.String, io.realm.Case)", "flatSignature": "(String, String, Case)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Condition that the value of field ends with the specified substring.", "name": "endsWith", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1783, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the substring.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the substring."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the substring."}], "parameterName": "value", "parameterComment": "the substring.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "casing    how to handle casing. Setting this to {@link Case#INSENSITIVE} only works for Latin-1 characters.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "how to handle casing. Setting this to "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Case#INSENSITIVE", "label": "", "referencedClassName": "io.realm.Case", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Case", "typeName": "Case", "qualifiedTypeName": "io.realm.Case", "simpleTypeName": "Case", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public final"}, "referencedMemberName": "INSENSITIVE"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " only works for Latin-1 characters."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "casing    how to handle casing."}], "parameterName": "casing", "parameterComment": "how to handle casing. Setting this to {@link Case#INSENSITIVE} only works for Latin-1 characters.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field ends with the specified substring.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field ends with the specified substring."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field ends with the specified substring."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field ends with the specified substring.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field ends with the specified substring."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field ends with the specified substring."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.endsWith", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "RealmAny", "typeName": "RealmAny", "qualifiedTypeName": "RealmAny", "simpleTypeName": "RealmAny", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "RealmAny", "asString": "RealmAny value", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "io.realm.Case", "typeName": "Case", "qualifiedTypeName": "io.realm.Case", "simpleTypeName": "Case", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "casing", "typeName": "Case", "asString": "Case casing", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the substring.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the substring."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the substring."}], "parameterName": "value", "parameterComment": "the substring.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "casing    how to handle casing. Setting this to {@link Case#INSENSITIVE} only works for Latin-1 characters.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "how to handle casing. Setting this to "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Case#INSENSITIVE", "label": "", "referencedClassName": "io.realm.Case", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Case", "typeName": "Case", "qualifiedTypeName": "io.realm.Case", "simpleTypeName": "Case", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public final"}, "referencedMemberName": "INSENSITIVE"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " only works for Latin-1 characters."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "casing    how to handle casing."}], "parameterName": "casing", "parameterComment": "how to handle casing. Setting this to {@link Case#INSENSITIVE} only works for Latin-1 characters.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, RealmAny, io.realm.Case)", "flatSignature": "(String, RealmAny, Case)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Condition that the value of field matches with the specified substring, with wildcards:\n <ul>\n <li>'*' matches [0, n] unicode chars</li>\n <li>'?' matches a single unicode char.</li>\n </ul>", "name": "like", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1805, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the wildcard string.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the wildcard string."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the wildcard string."}], "parameterName": "value", "parameterComment": "the wildcard string.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field matches with the specified substring, with wildcards:\n <ul>\n <li>'*' matches [0, n] unicode chars</li>\n <li>'?' matches a single unicode char.</li>\n </ul>", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field matches with the specified substring, with wildcards:\n <ul>\n <li>'*' matches [0, n] unicode chars</li>\n <li>'?' matches a single unicode char.</li>\n </ul>"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field matches with the specified substring, with wildcards:\n <ul>\n <li>'*' matches [0, n] unicode chars</li>\n <li>'?' matches a single unicode char.</li>\n </ul>"}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field matches with the specified substring, with wildcards:\n <ul>\n <li>'*' matches [0, n] unicode chars</li>\n <li>'?' matches a single unicode char.</li>\n </ul>", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field matches with the specified substring, with wildcards:\n <ul>\n <li>'*' matches [0, n] unicode chars</li>\n <li>'?' matches a single unicode char.</li>\n </ul>"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field matches with the specified substring, with wildcards:\n <ul>\n <li>'*' matches [0, n] unicode chars</li>\n <li>'?' matches a single unicode char.</li>\n </ul>"}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.like", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "value", "typeName": "String", "asString": "String value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the wildcard string.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the wildcard string."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the wildcard string."}], "parameterName": "value", "parameterComment": "the wildcard string.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, java.lang.String)", "flatSignature": "(String, String)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Condition that the value of field matches with the specified substring, with wildcards:\n <ul>\n <li>'*' matches [0, n] unicode chars</li>\n <li>'?' matches a single unicode char.</li>\n </ul>", "name": "like", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1821, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the wildcard string.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the wildcard string."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the wildcard string."}], "parameterName": "value", "parameterComment": "the wildcard string.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field matches with the specified substring, with wildcards:\n <ul>\n <li>'*' matches [0, n] unicode chars</li>\n <li>'?' matches a single unicode char.</li>\n </ul>", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field matches with the specified substring, with wildcards:\n <ul>\n <li>'*' matches [0, n] unicode chars</li>\n <li>'?' matches a single unicode char.</li>\n </ul>"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field matches with the specified substring, with wildcards:\n <ul>\n <li>'*' matches [0, n] unicode chars</li>\n <li>'?' matches a single unicode char.</li>\n </ul>"}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field matches with the specified substring, with wildcards:\n <ul>\n <li>'*' matches [0, n] unicode chars</li>\n <li>'?' matches a single unicode char.</li>\n </ul>", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field matches with the specified substring, with wildcards:\n <ul>\n <li>'*' matches [0, n] unicode chars</li>\n <li>'?' matches a single unicode char.</li>\n </ul>"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field matches with the specified substring, with wildcards:\n <ul>\n <li>'*' matches [0, n] unicode chars</li>\n <li>'?' matches a single unicode char.</li>\n </ul>"}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.like", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "RealmAny", "typeName": "RealmAny", "qualifiedTypeName": "RealmAny", "simpleTypeName": "RealmAny", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "RealmAny", "asString": "RealmAny value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the wildcard string.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the wildcard string."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the wildcard string."}], "parameterName": "value", "parameterComment": "the wildcard string.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, RealmAny)", "flatSignature": "(String, RealmAny)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Condition that the value of field matches with the specified substring, with wildcards:\n <ul>\n <li>'*' matches [0, n] unicode chars</li>\n <li>'?' matches a single unicode char.</li>\n </ul>", "name": "like", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1838, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the wildcard string.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the wildcard string."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the wildcard string."}], "parameterName": "value", "parameterComment": "the wildcard string.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "casing    how to handle casing. Setting this to {@link Case#INSENSITIVE} only works for Latin-1 characters.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "how to handle casing. Setting this to "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Case#INSENSITIVE", "label": "", "referencedClassName": "io.realm.Case", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Case", "typeName": "Case", "qualifiedTypeName": "io.realm.Case", "simpleTypeName": "Case", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public final"}, "referencedMemberName": "INSENSITIVE"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " only works for Latin-1 characters."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "casing    how to handle casing."}], "parameterName": "casing", "parameterComment": "how to handle casing. Setting this to {@link Case#INSENSITIVE} only works for Latin-1 characters.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field matches with the specified substring, with wildcards:\n <ul>\n <li>'*' matches [0, n] unicode chars</li>\n <li>'?' matches a single unicode char.</li>\n </ul>", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field matches with the specified substring, with wildcards:\n <ul>\n <li>'*' matches [0, n] unicode chars</li>\n <li>'?' matches a single unicode char.</li>\n </ul>"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field matches with the specified substring, with wildcards:\n <ul>\n <li>'*' matches [0, n] unicode chars</li>\n <li>'?' matches a single unicode char.</li>\n </ul>"}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field matches with the specified substring, with wildcards:\n <ul>\n <li>'*' matches [0, n] unicode chars</li>\n <li>'?' matches a single unicode char.</li>\n </ul>", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field matches with the specified substring, with wildcards:\n <ul>\n <li>'*' matches [0, n] unicode chars</li>\n <li>'?' matches a single unicode char.</li>\n </ul>"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field matches with the specified substring, with wildcards:\n <ul>\n <li>'*' matches [0, n] unicode chars</li>\n <li>'?' matches a single unicode char.</li>\n </ul>"}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.like", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "value", "typeName": "String", "asString": "String value", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "io.realm.Case", "typeName": "Case", "qualifiedTypeName": "io.realm.Case", "simpleTypeName": "Case", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "casing", "typeName": "Case", "asString": "Case casing", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the wildcard string.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the wildcard string."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the wildcard string."}], "parameterName": "value", "parameterComment": "the wildcard string.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "casing    how to handle casing. Setting this to {@link Case#INSENSITIVE} only works for Latin-1 characters.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "how to handle casing. Setting this to "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Case#INSENSITIVE", "label": "", "referencedClassName": "io.realm.Case", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Case", "typeName": "Case", "qualifiedTypeName": "io.realm.Case", "simpleTypeName": "Case", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public final"}, "referencedMemberName": "INSENSITIVE"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " only works for Latin-1 characters."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "casing    how to handle casing."}], "parameterName": "casing", "parameterComment": "how to handle casing. Setting this to {@link Case#INSENSITIVE} only works for Latin-1 characters.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, java.lang.String, io.realm.Case)", "flatSignature": "(String, String, Case)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Condition that the value of field matches with the specified substring, with wildcards:\n <ul>\n <li>'*' matches [0, n] unicode chars</li>\n <li>'?' matches a single unicode char.</li>\n </ul>", "name": "like", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1858, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the wildcard string.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the wildcard string."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the wildcard string."}], "parameterName": "value", "parameterComment": "the wildcard string.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "casing    how to handle casing. Setting this to {@link Case#INSENSITIVE} only works for Latin-1 characters.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "how to handle casing. Setting this to "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Case#INSENSITIVE", "label": "", "referencedClassName": "io.realm.Case", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Case", "typeName": "Case", "qualifiedTypeName": "io.realm.Case", "simpleTypeName": "Case", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public final"}, "referencedMemberName": "INSENSITIVE"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " only works for Latin-1 characters."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "casing    how to handle casing."}], "parameterName": "casing", "parameterComment": "how to handle casing. Setting this to {@link Case#INSENSITIVE} only works for Latin-1 characters.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field matches with the specified substring, with wildcards:\n <ul>\n <li>'*' matches [0, n] unicode chars</li>\n <li>'?' matches a single unicode char.</li>\n </ul>", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field matches with the specified substring, with wildcards:\n <ul>\n <li>'*' matches [0, n] unicode chars</li>\n <li>'?' matches a single unicode char.</li>\n </ul>"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field matches with the specified substring, with wildcards:\n <ul>\n <li>'*' matches [0, n] unicode chars</li>\n <li>'?' matches a single unicode char.</li>\n </ul>"}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field matches with the specified substring, with wildcards:\n <ul>\n <li>'*' matches [0, n] unicode chars</li>\n <li>'?' matches a single unicode char.</li>\n </ul>", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field matches with the specified substring, with wildcards:\n <ul>\n <li>'*' matches [0, n] unicode chars</li>\n <li>'?' matches a single unicode char.</li>\n </ul>"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that the value of field matches with the specified substring, with wildcards:\n <ul>\n <li>'*' matches [0, n] unicode chars</li>\n <li>'?' matches a single unicode char.</li>\n </ul>"}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.like", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "RealmAny", "typeName": "RealmAny", "qualifiedTypeName": "RealmAny", "simpleTypeName": "RealmAny", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "RealmAny", "asString": "RealmAny value", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "io.realm.Case", "typeName": "Case", "qualifiedTypeName": "io.realm.Case", "simpleTypeName": "Case", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "casing", "typeName": "Case", "asString": "Case casing", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if one or more arguments do not match class or field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if one or more arguments do not match class or field type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if one or more arguments do not match class or field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the wildcard string.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the wildcard string."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the wildcard string."}], "parameterName": "value", "parameterComment": "the wildcard string.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "casing    how to handle casing. Setting this to {@link Case#INSENSITIVE} only works for Latin-1 characters.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "how to handle casing. Setting this to "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Case#INSENSITIVE", "label": "", "referencedClassName": "io.realm.Case", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Case", "typeName": "Case", "qualifiedTypeName": "io.realm.Case", "simpleTypeName": "Case", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public final"}, "referencedMemberName": "INSENSITIVE"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " only works for Latin-1 characters."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "casing    how to handle casing."}], "parameterName": "casing", "parameterComment": "how to handle casing. Setting this to {@link Case#INSENSITIVE} only works for Latin-1 characters.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, RealmAny, io.realm.Case)", "flatSignature": "(String, RealmAny, Case)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Begin grouping of conditions (\"left parenthesis\"). A group must be closed with a call to {@code endGroup()}.", "name": "beginGroup", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1874, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}], "seeTags": [{"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "#endGroup()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#endGroup()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#endGroup()"}], "label": "", "referencedClassName": "io.realm.RealmQuery", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "endGroup()"}], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Begin grouping of conditions (\"left parenthesis\"). A group must be closed with a call to ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Begin grouping of conditions (\"left parenthesis\"). A group must be closed with a call to "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Begin grouping of conditions (\"left parenthesis\")."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "endGroup()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "endGroup()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "endGroup()"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Begin grouping of conditions (\"left parenthesis\").", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Begin grouping of conditions (\"left parenthesis\")."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Begin grouping of conditions (\"left parenthesis\")."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.beginGroup", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "End grouping of conditions (\"right parenthesis\") which was opened by a call to {@code beginGroup()}.", "name": "endGroup", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1886, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}], "seeTags": [{"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "#beginGroup()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#beginGroup()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#beginGroup()"}], "label": "", "referencedClassName": "io.realm.RealmQuery", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "beginGroup()"}], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "End grouping of conditions (\"right parenthesis\") which was opened by a call to ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "End grouping of conditions (\"right parenthesis\") which was opened by a call to "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "End grouping of conditions (\"right parenthesis\") which was opened by a call to"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "beginGroup()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "beginGroup()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "beginGroup()"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "End grouping of conditions (\"right parenthesis\") which was opened by a call to ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "End grouping of conditions (\"right parenthesis\") which was opened by a call to "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "End grouping of conditions (\"right parenthesis\") which was opened by a call to"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "beginGroup()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "beginGroup()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "beginGroup()"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.endGroup", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Logical-or two conditions.", "name": "or", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1897, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Logical-or two conditions.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Logical-or two conditions."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Logical-or two conditions."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Logical-or two conditions.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Logical-or two conditions."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Logical-or two conditions."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.or", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Logical-and two conditions\n Realm automatically applies logical-and between all query statements, so this is intended only as a mean to increase readability.", "name": "and", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1909, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object"}]}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Logical-and two conditions\n Realm automatically applies logical-and between all query statements, so this is intended only as a mean to increase readability.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Logical-and two conditions\n Realm automatically applies logical-and between all query statements, so this is intended only as a mean to increase readability."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Logical-and two conditions\n Realm automatically applies logical-and between all query statements, so this is intended only as a mean to increase readability."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Logical-and two conditions\n Realm automatically applies logical-and between all query statements, so this is intended only as a mean to increase readability.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Logical-and two conditions\n Realm automatically applies logical-and between all query statements, so this is intended only as a mean to increase readability."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Logical-and two conditions\n Realm automatically applies logical-and between all query statements, so this is intended only as a mean to increase readability."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.and", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Negate condition.", "name": "not", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1919, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Negate condition.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Negate condition."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Negate condition."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Negate condition.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Negate condition."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Negate condition."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.not", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Condition that finds values that are considered \"empty\" i.e., an empty list, the 0-length string or byte array.", "name": "isEmpty", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1933, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that finds values that are considered \"empty\" i.e., an empty list, the 0-length string or byte array.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that finds values that are considered \"empty\" i.e., an empty list, the 0-length string or byte array."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that finds values that are considered \"empty\" i.e., an empty list, the 0-length string or byte array."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that finds values that are considered \"empty\" i.e., an empty list, the 0-length string or byte array.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that finds values that are considered \"empty\" i.e., an empty list, the 0-length string or byte array."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that finds values that are considered \"empty\" i.e., an empty list, the 0-length string or byte array."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.isEmpty", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field name isn't valid or its type isn't either a RealmList,\n                                            String or byte array.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field name isn't valid or its type isn't either a RealmList,\n                                            String or byte array."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field name isn't valid or its type isn't either a RealmList,\n                                            String or byte array."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field name isn't valid or its type isn't either a RealmList,\n                                            String or byte array.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String)", "flatSignature": "(String)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Condition that finds values that are considered \"Not-empty\" i.e., a list, a string or a byte array with not-empty values.", "name": "isNotEmpty", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1947, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that finds values that are considered \"Not-empty\" i.e., a list, a string or a byte array with not-empty values.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that finds values that are considered \"Not-empty\" i.e., a list, a string or a byte array with not-empty values."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that finds values that are considered \"Not-empty\" i.e., a list, a string or a byte array with not-empty values."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that finds values that are considered \"Not-empty\" i.e., a list, a string or a byte array with not-empty values.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that finds values that are considered \"Not-empty\" i.e., a list, a string or a byte array with not-empty values."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that finds values that are considered \"Not-empty\" i.e., a list, a string or a byte array with not-empty values."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.isNotEmpty", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field name isn't valid or its type isn't either a RealmList,\n                                            String or byte array.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field name isn't valid or its type isn't either a RealmList,\n                                            String or byte array."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field name isn't valid or its type isn't either a RealmList,\n                                            String or byte array."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field name isn't valid or its type isn't either a RealmList,\n                                            String or byte array.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String)", "flatSignature": "(String)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Condition that value, if a dictionary field, contains the specified key.", "name": "containsKey", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1961, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "key       the key to search for.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the key to search for."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "key       the key to search for."}], "parameterName": "key", "parameterComment": "the key to search for.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified key.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified key."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified key."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified key.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified key."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified key."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.containsKey", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "key", "typeName": "String", "asString": "String key", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}]}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field name isn't valid.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field name isn't valid."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field name isn't valid."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field name isn't valid.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "key       the key to search for.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the key to search for."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "key       the key to search for."}], "parameterName": "key", "parameterComment": "the key to search for.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, java.lang.String)", "flatSignature": "(String, String)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Condition that value, if a dictionary field, contains the specified value.", "name": "containsValue", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1975, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to search for.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to search for."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to search for."}], "parameterName": "value", "parameterComment": "the value to search for.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.containsValue", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "java.lang.Boolean", "typeName": "Boolean", "qualifiedTypeName": "java.lang.Boolean", "simpleTypeName": "Boolean", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "value", "typeName": "Boolean", "asString": "Boolean value", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}]}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field name isn't valid.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field name isn't valid."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field name isn't valid."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field name isn't valid.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to search for.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to search for."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to search for."}], "parameterName": "value", "parameterComment": "the value to search for.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, java.lang.Boolean)", "flatSignature": "(String, Boolean)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Condition that value, if a dictionary field, contains the specified value.", "name": "containsValue", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 1989, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to search for.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to search for."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to search for."}], "parameterName": "value", "parameterComment": "the value to search for.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.containsValue", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "java.lang.Byte", "typeName": "Byte", "qualifiedTypeName": "java.lang.Byte", "simpleTypeName": "Byte", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "value", "typeName": "Byte", "asString": "Byte value", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}]}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field name isn't valid.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field name isn't valid."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field name isn't valid."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field name isn't valid.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to search for.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to search for."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to search for."}], "parameterName": "value", "parameterComment": "the value to search for.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, java.lang.Byte)", "flatSignature": "(String, Byte)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Condition that value, if a dictionary field, contains the specified value.", "name": "containsValue", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 2003, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to search for.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to search for."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to search for."}], "parameterName": "value", "parameterComment": "the value to search for.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.containsValue", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "java.lang.Short", "typeName": "Short", "qualifiedTypeName": "java.lang.Short", "simpleTypeName": "Short", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "value", "typeName": "Short", "asString": "Short value", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}]}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field name isn't valid.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field name isn't valid."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field name isn't valid."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field name isn't valid.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to search for.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to search for."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to search for."}], "parameterName": "value", "parameterComment": "the value to search for.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, java.lang.Short)", "flatSignature": "(String, Short)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Condition that value, if a dictionary field, contains the specified value.", "name": "containsValue", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 2017, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to search for", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to search for"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to search for"}], "parameterName": "value", "parameterComment": "the value to search for", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.containsValue", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "java.lang.Integer", "typeName": "Integer", "qualifiedTypeName": "java.lang.Integer", "simpleTypeName": "Integer", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "value", "typeName": "Integer", "asString": "Integer value", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}]}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field name isn't valid.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field name isn't valid."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field name isn't valid."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field name isn't valid.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to search for", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to search for"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to search for"}], "parameterName": "value", "parameterComment": "the value to search for", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, java.lang.Integer)", "flatSignature": "(String, Integer)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Condition that value, if a dictionary field, contains the specified value.", "name": "containsValue", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 2031, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to search for.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to search for."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to search for."}], "parameterName": "value", "parameterComment": "the value to search for.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.containsValue", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "java.lang.Long", "typeName": "Long", "qualifiedTypeName": "java.lang.Long", "simpleTypeName": "Long", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "value", "typeName": "Long", "asString": "Long value", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}]}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field name isn't valid.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field name isn't valid."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field name isn't valid."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field name isn't valid.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to search for.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to search for."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to search for."}], "parameterName": "value", "parameterComment": "the value to search for.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, java.lang.Long)", "flatSignature": "(String, Long)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Condition that value, if a dictionary field, contains the specified value.", "name": "containsValue", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 2045, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to search for.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to search for."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to search for."}], "parameterName": "value", "parameterComment": "the value to search for.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.containsValue", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "java.lang.Double", "typeName": "Double", "qualifiedTypeName": "java.lang.Double", "simpleTypeName": "Double", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "value", "typeName": "Double", "asString": "Double value", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}]}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field name isn't valid.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field name isn't valid."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field name isn't valid."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field name isn't valid.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to search for.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to search for."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to search for."}], "parameterName": "value", "parameterComment": "the value to search for.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, java.lang.Double)", "flatSignature": "(String, Double)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Condition that value, if a dictionary field, contains the specified value.", "name": "containsValue", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 2059, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to search for.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to search for."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to search for."}], "parameterName": "value", "parameterComment": "the value to search for.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.containsValue", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "java.lang.Float", "typeName": "Float", "qualifiedTypeName": "java.lang.Float", "simpleTypeName": "Float", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "value", "typeName": "Float", "asString": "Float value", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}]}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field name isn't valid.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field name isn't valid."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field name isn't valid."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field name isn't valid.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to search for.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to search for."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to search for."}], "parameterName": "value", "parameterComment": "the value to search for.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, java.lang.Float)", "flatSignature": "(String, Float)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Condition that value, if a dictionary field, contains the specified value.", "name": "containsValue", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 2073, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to search for.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to search for."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to search for."}], "parameterName": "value", "parameterComment": "the value to search for.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.containsValue", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "value", "typeName": "String", "asString": "String value", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}]}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field name isn't valid.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field name isn't valid."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field name isn't valid."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field name isn't valid.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to search for.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to search for."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to search for."}], "parameterName": "value", "parameterComment": "the value to search for.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, java.lang.String)", "flatSignature": "(String, String)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Condition that value, if a dictionary field, contains the specified value.", "name": "containsValue", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 2087, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to search for.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to search for."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to search for."}], "parameterName": "value", "parameterComment": "the value to search for.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.containsValue", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "byte[]", "typeName": "byte", "qualifiedTypeName": "byte", "simpleTypeName": "byte", "dimension": "[]", "isPrimitive": true, "elementType": {"_class": "Type", "asString": "byte", "typeName": "byte", "qualifiedTypeName": "byte", "simpleTypeName": "byte", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "byte[]", "asString": "byte[] value", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}]}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field name isn't valid.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field name isn't valid."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field name isn't valid."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field name isn't valid.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to search for.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to search for."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to search for."}], "parameterName": "value", "parameterComment": "the value to search for.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, byte[])", "flatSignature": "(String, byte[])", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Condition that value, if a dictionary field, contains the specified value.", "name": "containsValue", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 2101, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to search for.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to search for."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to search for."}], "parameterName": "value", "parameterComment": "the value to search for.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.containsValue", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "java.util.Date", "typeName": "Date", "qualifiedTypeName": "java.util.Date", "simpleTypeName": "Date", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "value", "typeName": "Date", "asString": "Date value", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}]}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field name isn't valid.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field name isn't valid."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field name isn't valid."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field name isn't valid.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to search for.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to search for."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to search for."}], "parameterName": "value", "parameterComment": "the value to search for.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, java.util.Date)", "flatSignature": "(String, Date)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Condition that value, if a dictionary field, contains the specified value.", "name": "containsValue", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 2115, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to search for.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to search for."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to search for."}], "parameterName": "value", "parameterComment": "the value to search for.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.containsValue", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "Decimal128", "typeName": "Decimal128", "qualifiedTypeName": "Decimal128", "simpleTypeName": "Decimal128", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "Decimal128", "asString": "Decimal128 value", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}]}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field name isn't valid.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field name isn't valid."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field name isn't valid."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field name isn't valid.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to search for.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to search for."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to search for."}], "parameterName": "value", "parameterComment": "the value to search for.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, Decimal128)", "flatSignature": "(String, Decimal128)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Condition that value, if a dictionary field, contains the specified value.", "name": "containsValue", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 2129, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to search for.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to search for."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to search for."}], "parameterName": "value", "parameterComment": "the value to search for.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.containsValue", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "ObjectId", "typeName": "ObjectId", "qualifiedTypeName": "ObjectId", "simpleTypeName": "ObjectId", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "ObjectId", "asString": "ObjectId value", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}]}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field name isn't valid.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field name isn't valid."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field name isn't valid."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field name isn't valid.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to search for.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to search for."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to search for."}], "parameterName": "value", "parameterComment": "the value to search for.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, ObjectId)", "flatSignature": "(String, ObjectId)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Condition that value, if a dictionary field, contains the specified value.", "name": "containsValue", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 2157, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to search for.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to search for."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to search for."}], "parameterName": "value", "parameterComment": "the value to search for.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified value."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.containsValue", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "RealmAny", "typeName": "RealmAny", "qualifiedTypeName": "RealmAny", "simpleTypeName": "RealmAny", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "RealmAny", "asString": "RealmAny value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field name isn't valid.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field name isn't valid."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field name isn't valid."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field name isn't valid.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value     the value to search for.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the value to search for."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value     the value to search for."}], "parameterName": "value", "parameterComment": "the value to search for.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, RealmAny)", "flatSignature": "(String, RealmAny)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Condition that value, if a dictionary field, contains the specified entry.", "name": "containsEntry", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 2185, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the query object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the query object."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "entry     the entry to search for.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the entry to search for."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "entry     the entry to search for."}], "parameterName": "entry", "parameterComment": "the entry to search for.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified entry.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified entry."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified entry."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified entry.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified entry."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Condition that value, if a dictionary field, contains the specified entry."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.containsEntry", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "ParameterizedType", "asString": "java.util.Map.Entry<java.lang.String, ?>", "typeName": "Map.Entry", "qualifiedTypeName": "java.util.Map.Entry", "simpleTypeName": "Entry", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, {"_class": "WildcardType", "asString": "?", "typeName": "?", "qualifiedTypeName": "?", "simpleTypeName": "?", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "extendsBounds": [], "superBounds": []}], "interfaceTypes": [], "containingType": {"_class": "ClassDoc", "asString": "java.util.Map<K, V>", "typeName": "Map", "qualifiedTypeName": "java.util.Map", "simpleTypeName": "Map", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, "name": "entry", "typeName": "java.util.Map.Entry<java.lang.String, ?>", "asString": "java.util.Map.Entry<java.lang.String, ?> entry", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field name isn't valid.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field name isn't valid."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field name isn't valid."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field name isn't valid.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to compare.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to compare."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to compare."}], "parameterName": "fieldName", "parameterComment": "the field to compare.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "entry     the entry to search for.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the entry to search for."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "entry     the entry to search for."}], "parameterName": "entry", "parameterComment": "the entry to search for.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, java.util.Map.Entry<java.lang.String, ?>)", "flatSignature": "(String, Map.Entry<String, ?>)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Calculates the sum of a given field.", "name": "sum", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 2204, "column": 19, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the sum of fields of the matching objects. If no objects exist or they all have\n {@code null} as the value for the given field, {@code 0} will be returned. When computing the\n sum, objects with {@code null} values are ignored. When applied to a RealmAny field, only\n numeric values will be summed up (Byte/Integer/Integer/Long/Float/Double/Decimal128) and the\n returning type will be {@code Decimal128}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the sum of fields of the matching objects. If no objects exist or they all have\n "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " as the value for the given field, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "0"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " will be returned. When computing the\n sum, objects with "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " values are ignored. When applied to a RealmAny field, only\n numeric values will be summed up (Byte/Integer/Integer/Long/Float/Double/Decimal128) and the\n returning type will be "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "Decimal128"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the sum of fields of the matching objects."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to sum. Only number and RealmAny fields are supported.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to sum. Only number and RealmAny fields are supported."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to sum."}], "parameterName": "fieldName", "parameterComment": "the field to sum. Only number and RealmAny fields are supported.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Calculates the sum of a given field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Calculates the sum of a given field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Calculates the sum of a given field."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Calculates the sum of a given field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Calculates the sum of a given field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Calculates the sum of a given field."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.sum", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field is not a number type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field is not a number type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field is not a number type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field is not a number type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "RealmException                     if called from the UI thread after opting out via {@link RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if called from the UI thread after opting out via "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)", "label": "", "referencedClassName": "io.realm.RealmConfiguration.Builder", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmConfiguration.Builder", "typeName": "RealmConfiguration.Builder", "qualifiedTypeName": "io.realm.RealmConfiguration.Builder", "simpleTypeName": "Builder", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public static"}, "referencedMemberName": "allowQueriesOnUiThread(boolean)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmException                     if called from the UI thread after opting out via "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)", "label": "", "referencedClassName": "io.realm.RealmConfiguration.Builder", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmConfiguration.Builder", "typeName": "RealmConfiguration.Builder", "qualifiedTypeName": "io.realm.RealmConfiguration.Builder", "simpleTypeName": "Builder", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public static"}, "referencedMemberName": "allowQueriesOnUiThread(boolean)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "exceptionName": "RealmException", "exceptionComment": "if called from the UI thread after opting out via {@link RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)}.", "exceptionType": {"_class": "ClassDoc", "asString": "io.realm.exceptions.RealmException", "typeName": "RealmException", "qualifiedTypeName": "io.realm.exceptions.RealmException", "simpleTypeName": "RealmException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to sum. Only number and RealmAny fields are supported.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to sum. Only number and RealmAny fields are supported."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to sum."}], "parameterName": "fieldName", "parameterComment": "the field to sum. Only number and RealmAny fields are supported.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String)", "flatSignature": "(String)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ClassDoc", "asString": "java.lang.Number", "typeName": "Number", "qualifiedTypeName": "java.lang.Number", "simpleTypeName": "Number", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"commentText": "Returns the average of a given field.\n Does not support dotted field notation.", "name": "average", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 2237, "column": 19, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the average for the given field amongst objects in query results. This will be of type double for all\n types of number fields. If no objects exist or they all have {@code null} as the value for the given field,\n {@code 0} will be returned. When computing the average, objects with {@code null} values are ignored.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the average for the given field amongst objects in query results. This will be of type double for all\n types of number fields. If no objects exist or they all have "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " as the value for the given field,\n "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "0"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " will be returned. When computing the average, objects with "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " values are ignored."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the average for the given field amongst objects in query results."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to calculate average on. Only number fields are supported.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to calculate average on. Only number fields are supported."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to calculate average on."}], "parameterName": "fieldName", "parameterComment": "the field to calculate average on. Only number fields are supported.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns the average of a given field.\n Does not support dotted field notation.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns the average of a given field.\n Does not support dotted field notation."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns the average of a given field."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns the average of a given field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns the average of a given field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns the average of a given field."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.average", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field is not a number type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field is not a number type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field is not a number type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field is not a number type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "RealmException                     if called from the UI thread after opting out via {@link RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if called from the UI thread after opting out via "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)", "label": "", "referencedClassName": "io.realm.RealmConfiguration.Builder", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmConfiguration.Builder", "typeName": "RealmConfiguration.Builder", "qualifiedTypeName": "io.realm.RealmConfiguration.Builder", "simpleTypeName": "Builder", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public static"}, "referencedMemberName": "allowQueriesOnUiThread(boolean)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmException                     if called from the UI thread after opting out via "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)", "label": "", "referencedClassName": "io.realm.RealmConfiguration.Builder", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmConfiguration.Builder", "typeName": "RealmConfiguration.Builder", "qualifiedTypeName": "io.realm.RealmConfiguration.Builder", "simpleTypeName": "Builder", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public static"}, "referencedMemberName": "allowQueriesOnUiThread(boolean)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "exceptionName": "RealmException", "exceptionComment": "if called from the UI thread after opting out via {@link RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)}.", "exceptionType": {"_class": "ClassDoc", "asString": "io.realm.exceptions.RealmException", "typeName": "RealmException", "qualifiedTypeName": "io.realm.exceptions.RealmException", "simpleTypeName": "RealmException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to calculate average on. Only number fields are supported.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to calculate average on. Only number fields are supported."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to calculate average on."}], "parameterName": "fieldName", "parameterComment": "the field to calculate average on. Only number fields are supported.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String)", "flatSignature": "(String)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "double", "typeName": "double", "qualifiedTypeName": "double", "simpleTypeName": "double", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Returns the average of a given field.\n Does not support dotted field notation.", "name": "averageDecimal128", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 2266, "column": 16, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the average for the given field amongst objects in query results. This will be of type Decimal128. If no objects exist or they all have {@code null}\n as the value for the given field {@code 0} will be returned. When computing the average, objects with {@code null} values are ignored.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the average for the given field amongst objects in query results. This will be of type Decimal128. If no objects exist or they all have "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n as the value for the given field "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "0"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " will be returned. When computing the average, objects with "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " values are ignored."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the average for the given field amongst objects in query results."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to calculate average on. Only Decimal128 fields is supported. For other number types consider using {@link #average(String)}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to calculate average on. Only Decimal128 fields is supported. For other number types consider using "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "#average(String)", "label": "", "referencedClassName": "io.realm.RealmQuery", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "average(String)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to calculate average on."}], "parameterName": "fieldName", "parameterComment": "the field to calculate average on. Only Decimal128 fields is supported. For other number types consider using {@link #average(String)}.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns the average of a given field.\n Does not support dotted field notation.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns the average of a given field.\n Does not support dotted field notation."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns the average of a given field."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns the average of a given field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns the average of a given field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns the average of a given field."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.averageDecimal128", "modifierSpecifier": 1, "modifiers": "public", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field is not a Decimal128 type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field is not a Decimal128 type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field is not a Decimal128 type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field is not a Decimal128 type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "RealmException                     if called from the UI thread after opting out via {@link RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if called from the UI thread after opting out via "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)", "label": "", "referencedClassName": "io.realm.RealmConfiguration.Builder", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmConfiguration.Builder", "typeName": "RealmConfiguration.Builder", "qualifiedTypeName": "io.realm.RealmConfiguration.Builder", "simpleTypeName": "Builder", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public static"}, "referencedMemberName": "allowQueriesOnUiThread(boolean)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmException                     if called from the UI thread after opting out via "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)", "label": "", "referencedClassName": "io.realm.RealmConfiguration.Builder", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmConfiguration.Builder", "typeName": "RealmConfiguration.Builder", "qualifiedTypeName": "io.realm.RealmConfiguration.Builder", "simpleTypeName": "Builder", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public static"}, "referencedMemberName": "allowQueriesOnUiThread(boolean)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "exceptionName": "RealmException", "exceptionComment": "if called from the UI thread after opting out via {@link RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)}.", "exceptionType": {"_class": "ClassDoc", "asString": "io.realm.exceptions.RealmException", "typeName": "RealmException", "qualifiedTypeName": "io.realm.exceptions.RealmException", "simpleTypeName": "RealmException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to calculate average on. Only Decimal128 fields is supported. For other number types consider using {@link #average(String)}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to calculate average on. Only Decimal128 fields is supported. For other number types consider using "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "#average(String)", "label": "", "referencedClassName": "io.realm.RealmQuery", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "average(String)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to calculate average on."}], "parameterName": "fieldName", "parameterComment": "the field to calculate average on. Only Decimal128 fields is supported. For other number types consider using {@link #average(String)}.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String)", "flatSignature": "(String)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "Decimal128", "typeName": "Decimal128", "qualifiedTypeName": "Decimal128", "simpleTypeName": "Decimal128", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Returns the average of a given field.\n Does not support dotted field notation.", "name": "averageRealmAny", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 2285, "column": 16, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the average for the given field amongst objects in query results. This will be of type Decimal128. If no objects exist or they all have {@code null}\n as the value for the given field {@code 0} will be returned. When computing the average, objects with {@code null} values are ignored.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the average for the given field amongst objects in query results. This will be of type Decimal128. If no objects exist or they all have "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n as the value for the given field "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "0"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " will be returned. When computing the average, objects with "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " values are ignored."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the average for the given field amongst objects in query results."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to calculate average on. Only RealmAny fields are supported. For other types consider using {@link #average(String)}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to calculate average on. Only RealmAny fields are supported. For other types consider using "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "#average(String)", "label": "", "referencedClassName": "io.realm.RealmQuery", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "average(String)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to calculate average on."}], "parameterName": "fieldName", "parameterComment": "the field to calculate average on. Only RealmAny fields are supported. For other types consider using {@link #average(String)}.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns the average of a given field.\n Does not support dotted field notation.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns the average of a given field.\n Does not support dotted field notation."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns the average of a given field."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns the average of a given field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns the average of a given field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns the average of a given field."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.averageRealmAny", "modifierSpecifier": 1, "modifiers": "public", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field is not a RealmAny type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field is not a RealmAny type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field is not a RealmAny type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field is not a RealmAny type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "RealmException                     if called from the UI thread after opting out via {@link RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if called from the UI thread after opting out via "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)", "label": "", "referencedClassName": "io.realm.RealmConfiguration.Builder", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmConfiguration.Builder", "typeName": "RealmConfiguration.Builder", "qualifiedTypeName": "io.realm.RealmConfiguration.Builder", "simpleTypeName": "Builder", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public static"}, "referencedMemberName": "allowQueriesOnUiThread(boolean)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmException                     if called from the UI thread after opting out via "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)", "label": "", "referencedClassName": "io.realm.RealmConfiguration.Builder", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmConfiguration.Builder", "typeName": "RealmConfiguration.Builder", "qualifiedTypeName": "io.realm.RealmConfiguration.Builder", "simpleTypeName": "Builder", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public static"}, "referencedMemberName": "allowQueriesOnUiThread(boolean)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "exceptionName": "RealmException", "exceptionComment": "if called from the UI thread after opting out via {@link RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)}.", "exceptionType": {"_class": "ClassDoc", "asString": "io.realm.exceptions.RealmException", "typeName": "RealmException", "qualifiedTypeName": "io.realm.exceptions.RealmException", "simpleTypeName": "RealmException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to calculate average on. Only RealmAny fields are supported. For other types consider using {@link #average(String)}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to calculate average on. Only RealmAny fields are supported. For other types consider using "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "#average(String)", "label": "", "referencedClassName": "io.realm.RealmQuery", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "average(String)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to calculate average on."}], "parameterName": "fieldName", "parameterComment": "the field to calculate average on. Only RealmAny fields are supported. For other types consider using {@link #average(String)}.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String)", "flatSignature": "(String)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "Decimal128", "typeName": "Decimal128", "qualifiedTypeName": "Decimal128", "simpleTypeName": "Decimal128", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Finds the minimum value of a field.", "name": "min", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 2304, "column": 19, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "if no objects exist or they all have {@code null} as the value for the given field, {@code null} will be\n returned. Otherwise the minimum value is returned. When determining the minimum value, objects with {@code null}\n values are ignored.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if no objects exist or they all have "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " as the value for the given field, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " will be\n returned. Otherwise the minimum value is returned. When determining the minimum value, objects with "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n values are ignored."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if no objects exist or they all have "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " as the value for the given field, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " will be\n returned."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to look for a minimum on. Only number fields are supported.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to look for a minimum on. Only number fields are supported."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to look for a minimum on."}], "parameterName": "fieldName", "parameterComment": "the field to look for a minimum on. Only number fields are supported.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the minimum value of a field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the minimum value of a field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the minimum value of a field."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the minimum value of a field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the minimum value of a field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the minimum value of a field."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.min", "modifierSpecifier": 1, "modifiers": "public", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field is not a number type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field is not a number type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field is not a number type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field is not a number type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "RealmException                     if called from the UI thread after opting out via {@link RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if called from the UI thread after opting out via "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)", "label": "", "referencedClassName": "io.realm.RealmConfiguration.Builder", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmConfiguration.Builder", "typeName": "RealmConfiguration.Builder", "qualifiedTypeName": "io.realm.RealmConfiguration.Builder", "simpleTypeName": "Builder", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public static"}, "referencedMemberName": "allowQueriesOnUiThread(boolean)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmException                     if called from the UI thread after opting out via "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)", "label": "", "referencedClassName": "io.realm.RealmConfiguration.Builder", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmConfiguration.Builder", "typeName": "RealmConfiguration.Builder", "qualifiedTypeName": "io.realm.RealmConfiguration.Builder", "simpleTypeName": "Builder", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public static"}, "referencedMemberName": "allowQueriesOnUiThread(boolean)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "exceptionName": "RealmException", "exceptionComment": "if called from the UI thread after opting out via {@link RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)}.", "exceptionType": {"_class": "ClassDoc", "asString": "io.realm.exceptions.RealmException", "typeName": "RealmException", "qualifiedTypeName": "io.realm.exceptions.RealmException", "simpleTypeName": "RealmException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to look for a minimum on. Only number fields are supported.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to look for a minimum on. Only number fields are supported."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to look for a minimum on."}], "parameterName": "fieldName", "parameterComment": "the field to look for a minimum on. Only number fields are supported.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String)", "flatSignature": "(String)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ClassDoc", "asString": "java.lang.Number", "typeName": "Number", "qualifiedTypeName": "java.lang.Number", "simpleTypeName": "Number", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"commentText": "Finds the minimum value of a field.", "name": "minimumDate", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 2335, "column": 17, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "if no objects exist or they all have {@code null} as the value for the given date field, {@code null}\n will be returned. Otherwise the minimum date is returned. When determining the minimum date, objects with\n {@code null} values are ignored.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if no objects exist or they all have "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " as the value for the given date field, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n will be returned. Otherwise the minimum date is returned. When determining the minimum date, objects with\n "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " values are ignored."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if no objects exist or they all have "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " as the value for the given date field, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n will be returned."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field name", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field name"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field name"}], "parameterName": "fieldName", "parameterComment": "the field name", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the minimum value of a field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the minimum value of a field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the minimum value of a field."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the minimum value of a field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the minimum value of a field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the minimum value of a field."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.minimumDate", "modifierSpecifier": 1, "modifiers": "public", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.UnsupportedOperationException if the query is not valid (\"syntax error\").", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the query is not valid (\"syntax error\")."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.UnsupportedOperationException if the query is not valid (\"syntax error\")."}], "exceptionName": "java.lang.UnsupportedOperationException", "exceptionComment": "if the query is not valid (\"syntax error\").", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.UnsupportedOperationException", "typeName": "UnsupportedOperationException", "qualifiedTypeName": "java.lang.UnsupportedOperationException", "simpleTypeName": "UnsupportedOperationException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "RealmException                          if called from the UI thread after opting out via {@link RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if called from the UI thread after opting out via "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)", "label": "", "referencedClassName": "io.realm.RealmConfiguration.Builder", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmConfiguration.Builder", "typeName": "RealmConfiguration.Builder", "qualifiedTypeName": "io.realm.RealmConfiguration.Builder", "simpleTypeName": "Builder", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public static"}, "referencedMemberName": "allowQueriesOnUiThread(boolean)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmException                          if called from the UI thread after opting out via "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)", "label": "", "referencedClassName": "io.realm.RealmConfiguration.Builder", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmConfiguration.Builder", "typeName": "RealmConfiguration.Builder", "qualifiedTypeName": "io.realm.RealmConfiguration.Builder", "simpleTypeName": "Builder", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public static"}, "referencedMemberName": "allowQueriesOnUiThread(boolean)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "exceptionName": "RealmException", "exceptionComment": "if called from the UI thread after opting out via {@link RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)}.", "exceptionType": {"_class": "ClassDoc", "asString": "io.realm.exceptions.RealmException", "typeName": "RealmException", "qualifiedTypeName": "io.realm.exceptions.RealmException", "simpleTypeName": "RealmException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field name", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field name"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field name"}], "parameterName": "fieldName", "parameterComment": "the field name", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String)", "flatSignature": "(String)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ClassDoc", "asString": "java.util.Date", "typeName": "Date", "qualifiedTypeName": "java.util.Date", "simpleTypeName": "Date", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"commentText": "Finds the minimum value of a {@link RealmAny} field.", "name": "minRealmAny", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 2353, "column": 21, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "if no objects exist or they all have {@code null} as the value for the given RealmAny field, {@link RealmAny.Type#NULL}\n will be returned. Otherwise the minimum RealmAny is returned. When determining the minimum RealmAny, objects with\n {@code null} values are ignored. See the {@link RealmAny} documentation for more details on how RealmAny values are compared.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if no objects exist or they all have "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " as the value for the given RealmAny field, "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmAny.Type#NULL", "label": "", "referencedClassName": "RealmAny.Type", "referencedMemberName": "NULL"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n will be returned. Otherwise the minimum RealmAny is returned. When determining the minimum RealmAny, objects with\n "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " values are ignored. See the "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmAny", "label": "", "referencedClassName": "RealmAny"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " documentation for more details on how RealmAny values are compared."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if no objects exist or they all have "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " as the value for the given RealmAny field, "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmAny.Type#NULL", "label": "", "referencedClassName": "RealmAny.Type", "referencedMemberName": "NULL"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n will be returned."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field containing a RealmAny value.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field containing a RealmAny value."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field containing a RealmAny value."}], "parameterName": "fieldName", "parameterComment": "the field containing a RealmAny value.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the minimum value of a ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the minimum value of a "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the minimum value of a"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmAny", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmAny"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmAny"}], "label": "", "referencedClassName": "RealmAny"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "field."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the minimum value of a ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the minimum value of a "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the minimum value of a"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmAny", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmAny"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmAny"}], "label": "", "referencedClassName": "RealmAny"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "field."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.minRealmAny", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.UnsupportedOperationException if the query is not valid (\"syntax error\").", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the query is not valid (\"syntax error\")."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.UnsupportedOperationException if the query is not valid (\"syntax error\")."}], "exceptionName": "java.lang.UnsupportedOperationException", "exceptionComment": "if the query is not valid (\"syntax error\").", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.UnsupportedOperationException", "typeName": "UnsupportedOperationException", "qualifiedTypeName": "java.lang.UnsupportedOperationException", "simpleTypeName": "UnsupportedOperationException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "RealmException                          if called from the UI thread after opting out via {@link RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if called from the UI thread after opting out via "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)", "label": "", "referencedClassName": "io.realm.RealmConfiguration.Builder", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmConfiguration.Builder", "typeName": "RealmConfiguration.Builder", "qualifiedTypeName": "io.realm.RealmConfiguration.Builder", "simpleTypeName": "Builder", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public static"}, "referencedMemberName": "allowQueriesOnUiThread(boolean)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmException                          if called from the UI thread after opting out via "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)", "label": "", "referencedClassName": "io.realm.RealmConfiguration.Builder", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmConfiguration.Builder", "typeName": "RealmConfiguration.Builder", "qualifiedTypeName": "io.realm.RealmConfiguration.Builder", "simpleTypeName": "Builder", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public static"}, "referencedMemberName": "allowQueriesOnUiThread(boolean)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "exceptionName": "RealmException", "exceptionComment": "if called from the UI thread after opting out via {@link RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)}.", "exceptionType": {"_class": "ClassDoc", "asString": "io.realm.exceptions.RealmException", "typeName": "RealmException", "qualifiedTypeName": "io.realm.exceptions.RealmException", "simpleTypeName": "RealmException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field containing a RealmAny value.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field containing a RealmAny value."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field containing a RealmAny value."}], "parameterName": "fieldName", "parameterComment": "the field containing a RealmAny value.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String)", "flatSignature": "(String)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "RealmAny", "typeName": "RealmAny", "qualifiedTypeName": "RealmAny", "simpleTypeName": "RealmAny", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Finds the maximum value of a field.", "name": "max", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 2372, "column": 19, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "if no objects exist or they all have {@code null} as the value for the given field, {@code null} will be\n returned. Otherwise the maximum value is returned. When determining the maximum value, objects with {@code null}\n values are ignored.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if no objects exist or they all have "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " as the value for the given field, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " will be\n returned. Otherwise the maximum value is returned. When determining the maximum value, objects with "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n values are ignored."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if no objects exist or they all have "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " as the value for the given field, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " will be\n returned."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to look for a maximum on. Only number fields are supported.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to look for a maximum on. Only number fields are supported."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to look for a maximum on."}], "parameterName": "fieldName", "parameterComment": "the field to look for a maximum on. Only number fields are supported.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the maximum value of a field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the maximum value of a field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the maximum value of a field."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the maximum value of a field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the maximum value of a field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the maximum value of a field."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.max", "modifierSpecifier": 1, "modifiers": "public", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field is not a number type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field is not a number type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field is not a number type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field is not a number type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "RealmException                     if called from the UI thread after opting out via {@link RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if called from the UI thread after opting out via "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)", "label": "", "referencedClassName": "io.realm.RealmConfiguration.Builder", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmConfiguration.Builder", "typeName": "RealmConfiguration.Builder", "qualifiedTypeName": "io.realm.RealmConfiguration.Builder", "simpleTypeName": "Builder", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public static"}, "referencedMemberName": "allowQueriesOnUiThread(boolean)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmException                     if called from the UI thread after opting out via "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)", "label": "", "referencedClassName": "io.realm.RealmConfiguration.Builder", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmConfiguration.Builder", "typeName": "RealmConfiguration.Builder", "qualifiedTypeName": "io.realm.RealmConfiguration.Builder", "simpleTypeName": "Builder", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public static"}, "referencedMemberName": "allowQueriesOnUiThread(boolean)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "exceptionName": "RealmException", "exceptionComment": "if called from the UI thread after opting out via {@link RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)}.", "exceptionType": {"_class": "ClassDoc", "asString": "io.realm.exceptions.RealmException", "typeName": "RealmException", "qualifiedTypeName": "io.realm.exceptions.RealmException", "simpleTypeName": "RealmException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to look for a maximum on. Only number fields are supported.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to look for a maximum on. Only number fields are supported."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to look for a maximum on."}], "parameterName": "fieldName", "parameterComment": "the field to look for a maximum on. Only number fields are supported.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String)", "flatSignature": "(String)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ClassDoc", "asString": "java.lang.Number", "typeName": "Number", "qualifiedTypeName": "java.lang.Number", "simpleTypeName": "Number", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"commentText": "Finds the maximum value of a field.", "name": "maximumDate", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 2402, "column": 17, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "if no objects exist or they all have {@code null} as the value for the given date field, {@code null}\n will be returned. Otherwise the maximum date is returned. When determining the maximum date, objects with\n {@code null} values are ignored.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if no objects exist or they all have "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " as the value for the given date field, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n will be returned. Otherwise the maximum date is returned. When determining the maximum date, objects with\n "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " values are ignored."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if no objects exist or they all have "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " as the value for the given date field, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n will be returned."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field name.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field name."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field name."}], "parameterName": "fieldName", "parameterComment": "the field name.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the maximum value of a field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the maximum value of a field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the maximum value of a field."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the maximum value of a field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the maximum value of a field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the maximum value of a field."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.maximumDate", "modifierSpecifier": 1, "modifiers": "public", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.UnsupportedOperationException if the query is not valid (\"syntax error\").", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the query is not valid (\"syntax error\")."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.UnsupportedOperationException if the query is not valid (\"syntax error\")."}], "exceptionName": "java.lang.UnsupportedOperationException", "exceptionComment": "if the query is not valid (\"syntax error\").", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.UnsupportedOperationException", "typeName": "UnsupportedOperationException", "qualifiedTypeName": "java.lang.UnsupportedOperationException", "simpleTypeName": "UnsupportedOperationException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field name.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field name."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field name."}], "parameterName": "fieldName", "parameterComment": "the field name.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String)", "flatSignature": "(String)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ClassDoc", "asString": "java.util.Date", "typeName": "Date", "qualifiedTypeName": "java.util.Date", "simpleTypeName": "Date", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"commentText": "Finds the maximum value of a {@link RealmAny} field.", "name": "maxRealmAny", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 2419, "column": 21, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "if no objects exist or they all have {@code null} as the value for the given RealmAny field, {@link RealmAny.Type#NULL}\n will be returned. Otherwise the maximum RealmAny is returned. When determining the maximum RealmAny, objects with\n {@code null} values are ignored. See the {@link RealmAny} documentation for more details on how RealmAny values are compared.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if no objects exist or they all have "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " as the value for the given RealmAny field, "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmAny.Type#NULL", "label": "", "referencedClassName": "RealmAny.Type", "referencedMemberName": "NULL"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n will be returned. Otherwise the maximum RealmAny is returned. When determining the maximum RealmAny, objects with\n "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " values are ignored. See the "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmAny", "label": "", "referencedClassName": "RealmAny"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " documentation for more details on how RealmAny values are compared."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if no objects exist or they all have "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " as the value for the given RealmAny field, "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmAny.Type#NULL", "label": "", "referencedClassName": "RealmAny.Type", "referencedMemberName": "NULL"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n will be returned."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field containing a RealmAny value.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field containing a RealmAny value."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field containing a RealmAny value."}], "parameterName": "fieldName", "parameterComment": "the field containing a RealmAny value.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the maximum value of a ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the maximum value of a "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the maximum value of a"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmAny", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmAny"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmAny"}], "label": "", "referencedClassName": "RealmAny"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "field."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the maximum value of a ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the maximum value of a "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the maximum value of a"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmAny", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmAny"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmAny"}], "label": "", "referencedClassName": "RealmAny"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "field."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.maxRealmAny", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.UnsupportedOperationException if the query is not valid (\"syntax error\").", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the query is not valid (\"syntax error\")."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.UnsupportedOperationException if the query is not valid (\"syntax error\")."}], "exceptionName": "java.lang.UnsupportedOperationException", "exceptionComment": "if the query is not valid (\"syntax error\").", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.UnsupportedOperationException", "typeName": "UnsupportedOperationException", "qualifiedTypeName": "java.lang.UnsupportedOperationException", "simpleTypeName": "UnsupportedOperationException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field containing a RealmAny value.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field containing a RealmAny value."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field containing a RealmAny value."}], "parameterName": "fieldName", "parameterComment": "the field containing a RealmAny value.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String)", "flatSignature": "(String)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "RealmAny", "typeName": "RealmAny", "qualifiedTypeName": "RealmAny", "simpleTypeName": "RealmAny", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Counts the number of objects that fulfill the query conditions.", "name": "count", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 2434, "column": 17, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the number of matching objects.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the number of matching objects."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the number of matching objects."}]}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Counts the number of objects that fulfill the query conditions.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Counts the number of objects that fulfill the query conditions."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Counts the number of objects that fulfill the query conditions."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Counts the number of objects that fulfill the query conditions.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Counts the number of objects that fulfill the query conditions."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Counts the number of objects that fulfill the query conditions."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.count", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.UnsupportedOperationException if the query is not valid (\"syntax error\").", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the query is not valid (\"syntax error\")."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.UnsupportedOperationException if the query is not valid (\"syntax error\")."}], "exceptionName": "java.lang.UnsupportedOperationException", "exceptionComment": "if the query is not valid (\"syntax error\").", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.UnsupportedOperationException", "typeName": "UnsupportedOperationException", "qualifiedTypeName": "java.lang.UnsupportedOperationException", "simpleTypeName": "UnsupportedOperationException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "RealmException                          if called from the UI thread after opting out via {@link RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if called from the UI thread after opting out via "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)", "label": "", "referencedClassName": "io.realm.RealmConfiguration.Builder", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmConfiguration.Builder", "typeName": "RealmConfiguration.Builder", "qualifiedTypeName": "io.realm.RealmConfiguration.Builder", "simpleTypeName": "Builder", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public static"}, "referencedMemberName": "allowQueriesOnUiThread(boolean)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmException                          if called from the UI thread after opting out via "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)", "label": "", "referencedClassName": "io.realm.RealmConfiguration.Builder", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmConfiguration.Builder", "typeName": "RealmConfiguration.Builder", "qualifiedTypeName": "io.realm.RealmConfiguration.Builder", "simpleTypeName": "Builder", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public static"}, "referencedMemberName": "allowQueriesOnUiThread(boolean)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "exceptionName": "RealmException", "exceptionComment": "if called from the UI thread after opting out via {@link RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)}.", "exceptionType": {"_class": "ClassDoc", "asString": "io.realm.exceptions.RealmException", "typeName": "RealmException", "qualifiedTypeName": "io.realm.exceptions.RealmException", "simpleTypeName": "RealmException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "long", "typeName": "long", "qualifiedTypeName": "long", "simpleTypeName": "long", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Finds all objects that fulfill the query conditions.\n <p>\n Launching heavy queries from the UI thread may result in a drop of frames or even ANRs. <b>We do not recommend\n doing so and therefore it is not allowed by default.</b> If you want to prevent these behaviors you can obtain\n a Realm using a {@link RealmConfiguration} that explicitly sets\n {@link RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)} to {@code false}. This way you will be forced\n to launch your queries from a non-UI thread, otherwise calls to this method will throw a {@link RealmException}.\n Alternatively, you can use {@link #findAllAsync()}.", "name": "findAll", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 2462, "column": 28, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "a {@link io.realm.RealmResults} containing objects. If no objects match the condition, a list with zero\n objects is returned.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "a "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "io.realm.RealmResults", "label": "", "referencedClassName": "io.realm.RealmResults", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " containing objects. If no objects match the condition, a list with zero\n objects is returned."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "a "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "io.realm.RealmResults", "label": "", "referencedClassName": "io.realm.RealmResults", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " containing objects."}]}], "seeTags": [{"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "io.realm.RealmResults", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.RealmResults"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.RealmResults"}], "label": "", "referencedClassName": "io.realm.RealmResults", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds all objects that fulfill the query conditions.\n <p>\n Launching heavy queries from the UI thread may result in a drop of frames or even ANRs. <b>We do not recommend\n doing so and therefore it is not allowed by default.</b> If you want to prevent these behaviors you can obtain\n a Realm using a ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds all objects that fulfill the query conditions.\n <p>\n Launching heavy queries from the UI thread may result in a drop of frames or even ANRs. <b>We do not recommend\n doing so and therefore it is not allowed by default.</b> If you want to prevent these behaviors you can obtain\n a Realm using a "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds all objects that fulfill the query conditions."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmConfiguration", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmConfiguration"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmConfiguration"}], "label": "", "referencedClassName": "io.realm.RealmConfiguration", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmConfiguration", "typeName": "RealmConfiguration", "qualifiedTypeName": "io.realm.RealmConfiguration", "simpleTypeName": "RealmConfiguration", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " that explicitly sets\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " that explicitly sets\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "that explicitly sets"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)"}], "label": "", "referencedClassName": "io.realm.RealmConfiguration.Builder", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmConfiguration.Builder", "typeName": "RealmConfiguration.Builder", "qualifiedTypeName": "io.realm.RealmConfiguration.Builder", "simpleTypeName": "Builder", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public static"}, "referencedMemberName": "allowQueriesOnUiThread(boolean)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " to ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " to "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "to"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "false"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "false"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ". This way you will be forced\n to launch your queries from a non-UI thread, otherwise calls to this method will throw a ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ". This way you will be forced\n to launch your queries from a non-UI thread, otherwise calls to this method will throw a "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmException", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmException"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmException"}], "label": "", "referencedClassName": "io.realm.exceptions.RealmException", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.exceptions.RealmException", "typeName": "RealmException", "qualifiedTypeName": "io.realm.exceptions.RealmException", "simpleTypeName": "RealmException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public final"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n Alternatively, you can use ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n Alternatively, you can use "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "#findAllAsync()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#findAllAsync()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#findAllAsync()"}], "label": "", "referencedClassName": "io.realm.RealmQuery", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "findAllAsync()"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds all objects that fulfill the query conditions.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds all objects that fulfill the query conditions."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds all objects that fulfill the query conditions."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.findAll", "modifierSpecifier": 1, "modifiers": "public", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "java.lang.SuppressWarnings", "typeName": "SuppressWarnings", "qualifiedTypeName": "java.lang.SuppressWarnings", "simpleTypeName": "SuppressWarnings", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}, "elementValues": [{"element": {"commentText": "", "name": "value", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": false, "isAnnotationTypeElement": true, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": false, "position": {"line": 0, "column": 0, "file": "SuppressWarnings.java"}, "tags": [], "seeTags": [], "inlineTags": [], "firstSentenceTags": [], "_class": "AnnotationTypeElementDoc", "containingClass": {"_class": "ClassDoc", "asString": "java.lang.SuppressWarnings", "typeName": "SuppressWarnings", "qualifiedTypeName": "java.lang.SuppressWarnings", "simpleTypeName": "SuppressWarnings", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}, "containingPackage": {"_class": "PackageDoc", "name": "java.lang"}, "qualifiedName": "java.lang.SuppressWarnings.value", "modifierSpecifier": 1025, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "java.lang.String[]", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "[]", "isPrimitive": false, "elementType": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "isClass": false, "isAnnotationType": false}}, "value": "\"unchecked\""}], "isSynthesized": false}], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "RealmException if called from the UI thread after opting out via {@link RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if called from the UI thread after opting out via "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)", "label": "", "referencedClassName": "io.realm.RealmConfiguration.Builder", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmConfiguration.Builder", "typeName": "RealmConfiguration.Builder", "qualifiedTypeName": "io.realm.RealmConfiguration.Builder", "simpleTypeName": "Builder", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public static"}, "referencedMemberName": "allowQueriesOnUiThread(boolean)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmException if called from the UI thread after opting out via "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)", "label": "", "referencedClassName": "io.realm.RealmConfiguration.Builder", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmConfiguration.Builder", "typeName": "RealmConfiguration.Builder", "qualifiedTypeName": "io.realm.RealmConfiguration.Builder", "simpleTypeName": "Builder", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public static"}, "referencedMemberName": "allowQueriesOnUiThread(boolean)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "exceptionName": "RealmException", "exceptionComment": "if called from the UI thread after opting out via {@link RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)}.", "exceptionType": {"_class": "ClassDoc", "asString": "io.realm.exceptions.RealmException", "typeName": "RealmException", "qualifiedTypeName": "io.realm.exceptions.RealmException", "simpleTypeName": "RealmException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ParameterizedType", "asString": "io.realm.OrderedRealmCollectionImpl<E>", "typeName": "OrderedRealmCollectionImpl", "qualifiedTypeName": "io.realm.OrderedRealmCollectionImpl", "simpleTypeName": "OrderedRealmCollectionImpl", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ParameterizedType", "asString": "java.util.AbstractList<E>", "typeName": "AbstractList", "qualifiedTypeName": "java.util.AbstractList", "simpleTypeName": "AbstractList", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ParameterizedType", "asString": "java.util.AbstractCollection<E>", "typeName": "AbstractCollection", "qualifiedTypeName": "java.util.AbstractCollection", "simpleTypeName": "AbstractCollection", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": ["java.util.Collection"]}, "interfaceTypes": ["java.util.List"]}, "interfaceTypes": ["io.realm.OrderedRealmCollection"]}, "interfaceTypes": []}}, {"commentText": "Finds all objects that fulfill the query conditions. This method is only available from a Looper thread.", "name": "findAllAsync", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 2490, "column": 28, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "immediately an empty {@link RealmResults}. Users need to register a listener\n {@link io.realm.RealmResults#addChangeListener(RealmChangeListener)} to be notified when the query completes.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "immediately an empty "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmResults", "label": "", "referencedClassName": "io.realm.RealmResults", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ". Users need to register a listener\n "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "io.realm.RealmResults#addChangeListener(RealmChangeListener)", "label": "", "referencedClassName": "io.realm.RealmResults", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "addChangeListener(RealmChangeListener)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " to be notified when the query completes."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "immediately an empty "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmResults", "label": "", "referencedClassName": "io.realm.RealmResults", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}], "seeTags": [{"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "io.realm.RealmResults", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.RealmResults"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.RealmResults"}], "label": "", "referencedClassName": "io.realm.RealmResults", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds all objects that fulfill the query conditions. This method is only available from a Looper thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds all objects that fulfill the query conditions. This method is only available from a Looper thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds all objects that fulfill the query conditions."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds all objects that fulfill the query conditions.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds all objects that fulfill the query conditions."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds all objects that fulfill the query conditions."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.findAllAsync", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ParameterizedType", "asString": "io.realm.OrderedRealmCollectionImpl<E>", "typeName": "OrderedRealmCollectionImpl", "qualifiedTypeName": "io.realm.OrderedRealmCollectionImpl", "simpleTypeName": "OrderedRealmCollectionImpl", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ParameterizedType", "asString": "java.util.AbstractList<E>", "typeName": "AbstractList", "qualifiedTypeName": "java.util.AbstractList", "simpleTypeName": "AbstractList", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ParameterizedType", "asString": "java.util.AbstractCollection<E>", "typeName": "AbstractCollection", "qualifiedTypeName": "java.util.AbstractCollection", "simpleTypeName": "AbstractCollection", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": ["java.util.Collection"]}, "interfaceTypes": ["java.util.List"]}, "interfaceTypes": ["io.realm.OrderedRealmCollection"]}, "interfaceTypes": []}}, {"commentText": "Sorts the query result by the specific field name in ascending order.\n <p>\n Sorting is currently limited to character sets in 'Latin Basic', 'Latin Supplement', 'Latin Extended A',\n 'Latin Extended B' (UTF-8 range 0-591). For other character sets, sorting will have no effect.", "name": "sort", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 2506, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field name to sort by.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field name to sort by."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field name to sort by."}], "parameterName": "fieldName", "parameterComment": "the field name to sort by.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sorts the query result by the specific field name in ascending order.\n <p>\n Sorting is currently limited to character sets in 'Latin Basic', 'Latin Supplement', 'Latin Extended A',\n 'Latin Extended B' (UTF-8 range 0-591). For other character sets, sorting will have no effect.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sorts the query result by the specific field name in ascending order.\n <p>\n Sorting is currently limited to character sets in 'Latin Basic', 'Latin Supplement', 'Latin Extended A',\n 'Latin Extended B' (UTF-8 range 0-591). For other character sets, sorting will have no effect."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sorts the query result by the specific field name in ascending order."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sorts the query result by the specific field name in ascending order.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sorts the query result by the specific field name in ascending order."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sorts the query result by the specific field name in ascending order."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.sort", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if the field name does not exist.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field name does not exist."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if the field name does not exist."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if the field name does not exist.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException    if a sorting order was already defined.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if a sorting order was already defined."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException    if a sorting order was already defined."}], "exceptionName": "IllegalStateException", "exceptionComment": "if a sorting order was already defined.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field name to sort by.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field name to sort by."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field name to sort by."}], "parameterName": "fieldName", "parameterComment": "the field name to sort by.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String)", "flatSignature": "(String)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Sorts the query result by the specified field name and order.\n <p>\n Sorting is currently limited to character sets in 'Latin Basic', 'Latin Supplement', 'Latin Extended A',\n 'Latin Extended B' (UTF-8 range 0-591). For other character sets, sorting will have no effect.", "name": "sort", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 2522, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field name to sort by.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field name to sort by."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field name to sort by."}], "parameterName": "fieldName", "parameterComment": "the field name to sort by.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "sortOrder how to sort the results.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "how to sort the results."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "sortOrder how to sort the results."}], "parameterName": "sortOrder", "parameterComment": "how to sort the results.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sorts the query result by the specified field name and order.\n <p>\n Sorting is currently limited to character sets in 'Latin Basic', 'Latin Supplement', 'Latin Extended A',\n 'Latin Extended B' (UTF-8 range 0-591). For other character sets, sorting will have no effect.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sorts the query result by the specified field name and order.\n <p>\n Sorting is currently limited to character sets in 'Latin Basic', 'Latin Supplement', 'Latin Extended A',\n 'Latin Extended B' (UTF-8 range 0-591). For other character sets, sorting will have no effect."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sorts the query result by the specified field name and order."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sorts the query result by the specified field name and order.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sorts the query result by the specified field name and order."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sorts the query result by the specified field name and order."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.sort", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "io.realm.Sort", "typeName": "Sort", "qualifiedTypeName": "io.realm.Sort", "simpleTypeName": "Sort", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "sortOrder", "typeName": "Sort", "asString": "Sort sortOrder", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if the field name does not exist.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field name does not exist."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if the field name does not exist."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if the field name does not exist.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException    if a sorting order was already defined.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if a sorting order was already defined."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException    if a sorting order was already defined."}], "exceptionName": "IllegalStateException", "exceptionComment": "if a sorting order was already defined.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field name to sort by.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field name to sort by."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field name to sort by."}], "parameterName": "fieldName", "parameterComment": "the field name to sort by.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "sortOrder how to sort the results.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "how to sort the results."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "sortOrder how to sort the results."}], "parameterName": "sortOrder", "parameterComment": "how to sort the results.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, io.realm.Sort)", "flatSignature": "(String, Sort)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Sorts the query result by the specific field names in the provided orders. {@code fieldName2} is only used\n in case of equal values in {@code fieldName1}.\n <p>\n Sorting is currently limited to character sets in 'Latin Basic', 'Latin Supplement', 'Latin Extended A',\n 'Latin Extended B' (UTF-8 range 0-591). For other character sets, sorting will have no effect.", "name": "sort", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 2541, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName1 first field name", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "first field name"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName1 first field name"}], "parameterName": "fieldName1", "parameterComment": "first field name", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "sortOrder1 sort order for first field", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "sort order for first field"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "sortOrder1 sort order for first field"}], "parameterName": "sortOrder1", "parameterComment": "sort order for first field", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName2 second field name", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "second field name"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName2 second field name"}], "parameterName": "fieldName2", "parameterComment": "second field name", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "sortOrder2 sort order for second field", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "sort order for second field"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "sortOrder2 sort order for second field"}], "parameterName": "sortOrder2", "parameterComment": "sort order for second field", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sorts the query result by the specific field names in the provided orders. ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sorts the query result by the specific field names in the provided orders. "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sorts the query result by the specific field names in the provided orders."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "fieldName2", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName2"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName2"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " is only used\n in case of equal values in ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " is only used\n in case of equal values in "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "is only used\n in case of equal values in"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "fieldName1", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName1"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName1"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n <p>\n Sorting is currently limited to character sets in 'Latin Basic', 'Latin Supplement', 'Latin Extended A',\n 'Latin Extended B' (UTF-8 range 0-591). For other character sets, sorting will have no effect.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n <p>\n Sorting is currently limited to character sets in 'Latin Basic', 'Latin Supplement', 'Latin Extended A',\n 'Latin Extended B' (UTF-8 range 0-591). For other character sets, sorting will have no effect."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sorts the query result by the specific field names in the provided orders.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sorts the query result by the specific field names in the provided orders."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sorts the query result by the specific field names in the provided orders."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.sort", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName1", "typeName": "String", "asString": "String fieldName1", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "io.realm.Sort", "typeName": "Sort", "qualifiedTypeName": "io.realm.Sort", "simpleTypeName": "Sort", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "sortOrder1", "typeName": "Sort", "asString": "Sort sortOrder1", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName2", "typeName": "String", "asString": "String fieldName2", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "io.realm.Sort", "typeName": "Sort", "qualifiedTypeName": "io.realm.Sort", "simpleTypeName": "Sort", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "sortOrder2", "typeName": "Sort", "asString": "Sort sortOrder2", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if the field name does not exist.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field name does not exist."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if the field name does not exist."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if the field name does not exist.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException    if a sorting order was already defined.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if a sorting order was already defined."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException    if a sorting order was already defined."}], "exceptionName": "IllegalStateException", "exceptionComment": "if a sorting order was already defined.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName1 first field name", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "first field name"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName1 first field name"}], "parameterName": "fieldName1", "parameterComment": "first field name", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "sortOrder1 sort order for first field", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "sort order for first field"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "sortOrder1 sort order for first field"}], "parameterName": "sortOrder1", "parameterComment": "sort order for first field", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName2 second field name", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "second field name"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName2 second field name"}], "parameterName": "fieldName2", "parameterComment": "second field name", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "sortOrder2 sort order for second field", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "sort order for second field"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "sortOrder2 sort order for second field"}], "parameterName": "sortOrder2", "parameterComment": "sort order for second field", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, io.realm.Sort, java.lang.String, io.realm.Sort)", "flatSignature": "(String, Sort, String, Sort)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Sorts the query result by the specific field names in the provided orders. Later fields will only be used\n if the previous field values are equal.\n <p>\n Sorting is currently limited to character sets in 'Latin Basic', 'Latin Supplement', 'Latin Extended A',\n 'Latin Extended B' (UTF-8 range 0-591). For other character sets, sorting will have no effect.", "name": "sort", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 2558, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldNames an array of field names to sort by.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "an array of field names to sort by."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldNames an array of field names to sort by."}], "parameterName": "fieldNames", "parameterComment": "an array of field names to sort by.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "sortOrders how to sort the field names.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "how to sort the field names."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "sortOrders how to sort the field names."}], "parameterName": "sortOrders", "parameterComment": "how to sort the field names.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sorts the query result by the specific field names in the provided orders. Later fields will only be used\n if the previous field values are equal.\n <p>\n Sorting is currently limited to character sets in 'Latin Basic', 'Latin Supplement', 'Latin Extended A',\n 'Latin Extended B' (UTF-8 range 0-591). For other character sets, sorting will have no effect.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sorts the query result by the specific field names in the provided orders. Later fields will only be used\n if the previous field values are equal.\n <p>\n Sorting is currently limited to character sets in 'Latin Basic', 'Latin Supplement', 'Latin Extended A',\n 'Latin Extended B' (UTF-8 range 0-591). For other character sets, sorting will have no effect."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sorts the query result by the specific field names in the provided orders."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sorts the query result by the specific field names in the provided orders.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sorts the query result by the specific field names in the provided orders."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sorts the query result by the specific field names in the provided orders."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.sort", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "Type", "asString": "java.lang.String[]", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "[]", "isPrimitive": false, "elementType": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "isClass": false, "isAnnotationType": false}, "name": "fieldNames", "typeName": "java.lang.String[]", "asString": "java.lang.String[] fieldNames", "annotations": []}, {"type": {"_class": "Type", "asString": "io.realm.Sort[]", "typeName": "Sort", "qualifiedTypeName": "io.realm.Sort", "simpleTypeName": "Sort", "dimension": "[]", "isPrimitive": false, "elementType": {"_class": "ClassDoc", "asString": "io.realm.Sort", "typeName": "Sort", "qualifiedTypeName": "io.realm.Sort", "simpleTypeName": "Sort", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "isClass": false, "isAnnotationType": false}, "name": "sortOrders", "typeName": "io.realm.Sort[]", "asString": "io.realm.Sort[] sortOrders", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if the field name does not exist.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field name does not exist."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if the field name does not exist."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if the field name does not exist.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException    if a sorting order was already defined.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if a sorting order was already defined."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException    if a sorting order was already defined."}], "exceptionName": "IllegalStateException", "exceptionComment": "if a sorting order was already defined.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldNames an array of field names to sort by.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "an array of field names to sort by."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldNames an array of field names to sort by."}], "parameterName": "fieldNames", "parameterComment": "an array of field names to sort by.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "sortOrders how to sort the field names.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "how to sort the field names."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "sortOrders how to sort the field names."}], "parameterName": "sortOrders", "parameterComment": "how to sort the field names.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String[], io.realm.Sort[])", "flatSignature": "(String[], Sort[])", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Selects a distinct set of objects of a specific class. When multiple distinct fields are\n given, all unique combinations of values in the fields will be returned. In case of multiple\n matches, it is undefined which object is returned. Unless the result is sorted, then the\n first object will be returned.", "name": "distinct", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 2584, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "firstFieldName      first field name to use when finding distinct objects.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "first field name to use when finding distinct objects."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "firstFieldName      first field name to use when finding distinct objects."}], "parameterName": "firstFieldName", "parameterComment": "first field name to use when finding distinct objects.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "remainingFieldNames remaining field names when determining all unique combinations of field values.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "remaining field names when determining all unique combinations of field values."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "remainingFieldNames remaining field names when determining all unique combinations of field values."}], "parameterName": "remainingFieldNames", "parameterComment": "remaining field names when determining all unique combinations of field values.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Selects a distinct set of objects of a specific class. When multiple distinct fields are\n given, all unique combinations of values in the fields will be returned. In case of multiple\n matches, it is undefined which object is returned. Unless the result is sorted, then the\n first object will be returned.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Selects a distinct set of objects of a specific class. When multiple distinct fields are\n given, all unique combinations of values in the fields will be returned. In case of multiple\n matches, it is undefined which object is returned. Unless the result is sorted, then the\n first object will be returned."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Selects a distinct set of objects of a specific class."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Selects a distinct set of objects of a specific class.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Selects a distinct set of objects of a specific class."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Selects a distinct set of objects of a specific class."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.distinct", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": true, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "firstFieldName", "typeName": "String", "asString": "String firstFieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "java.lang.String[]", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "[]", "isPrimitive": false, "elementType": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "isClass": false, "isAnnotationType": false}, "name": "remainingFieldNames", "typeName": "java.lang.String[]", "asString": "java.lang.String[] remainingFieldNames", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if field names is empty or {@code null}, does not exist,\n                                  is an unsupported type, or points to a linked field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if field names is empty or "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ", does not exist,\n                                  is an unsupported type, or points to a linked field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if field names is empty or "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ", does not exist,\n                                  is an unsupported type, or points to a linked field."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if field names is empty or {@code null}, does not exist,\n                                  is an unsupported type, or points to a linked field.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException    if distinct field names were already defined.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if distinct field names were already defined."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException    if distinct field names were already defined."}], "exceptionName": "IllegalStateException", "exceptionComment": "if distinct field names were already defined.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "firstFieldName      first field name to use when finding distinct objects.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "first field name to use when finding distinct objects."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "firstFieldName      first field name to use when finding distinct objects."}], "parameterName": "firstFieldName", "parameterComment": "first field name to use when finding distinct objects.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "remainingFieldNames remaining field names when determining all unique combinations of field values.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "remaining field names when determining all unique combinations of field values."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "remainingFieldNames remaining field names when determining all unique combinations of field values."}], "parameterName": "remainingFieldNames", "parameterComment": "remaining field names when determining all unique combinations of field values.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, java.lang.String...)", "flatSignature": "(String, String...)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Limits the number of objects returned in case the query matched more objects.\n <p>\n Note that when using this method in combination with {@link #sort(String)} and\n {@link #distinct(String, String...)} they will be executed in the order they where added which can\n affect the end result.", "name": "limit", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 2607, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "limit a limit that is {@code &ge; 1}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "a limit that is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "&ge; 1"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "limit a limit that is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "&ge; 1"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "parameterName": "limit", "parameterComment": "a limit that is {@code &ge; 1}.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Limits the number of objects returned in case the query matched more objects.\n <p>\n Note that when using this method in combination with ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Limits the number of objects returned in case the query matched more objects.\n <p>\n Note that when using this method in combination with "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Limits the number of objects returned in case the query matched more objects."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "#sort(String)", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#sort(String)"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#sort(String)"}], "label": "", "referencedClassName": "io.realm.RealmQuery", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "sort(String)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " and\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " and\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "and"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "#distinct(String, String...)", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#distinct(String, String...)"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#distinct(String, String...)"}], "label": "", "referencedClassName": "io.realm.RealmQuery", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "distinct(String, String...)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " they will be executed in the order they where added which can\n affect the end result.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " they will be executed in the order they where added which can\n affect the end result."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "they will be executed in the order they where added which can\n affect the end result."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Limits the number of objects returned in case the query matched more objects.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Limits the number of objects returned in case the query matched more objects."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Limits the number of objects returned in case the query matched more objects."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.limit", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "Type", "asString": "long", "typeName": "long", "qualifiedTypeName": "long", "simpleTypeName": "long", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "limit", "typeName": "long", "asString": "long limit", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if the provided {@code limit} is less than 1.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the provided "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "limit"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " is less than 1."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if the provided "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "limit"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " is less than 1."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if the provided {@code limit} is less than 1.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "limit a limit that is {@code &ge; 1}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "a limit that is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "&ge; 1"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "limit a limit that is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "&ge; 1"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "parameterName": "limit", "parameterComment": "a limit that is {@code &ge; 1}.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(long)", "flatSignature": "(long)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "This predicate will always match.", "name": "alwaysTrue", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 2616, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "This predicate will always match.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "This predicate will always match."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "This predicate will always match."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "This predicate will always match.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "This predicate will always match."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "This predicate will always match."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.alwaysTrue", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "This predicate will never match, resulting in the query always returning 0 results.", "name": "alwaysFalse", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 2625, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "This predicate will never match, resulting in the query always returning 0 results.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "This predicate will never match, resulting in the query always returning 0 results."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "This predicate will never match, resulting in the query always returning 0 results."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "This predicate will never match, resulting in the query always returning 0 results.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "This predicate will never match, resulting in the query always returning 0 results."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "This predicate will never match, resulting in the query always returning 0 results."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.alwaysFalse", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Create a text-based predicate using the Realm Query Language. This predicate can be combined\n with other raw or type safe predicates, it accepts Realm values as arguments.\n <p>\n Class and property names used in the raw predicate can be either the names defined in the\n Realm Model classes or the internal names defined using the {@link io.realm.annotations.RealmClass}\n or {@link io.realm.annotations.RealmField} annotations. If a class or property name contains spaces those must\n be escaped.\n </p>\n Arguments are defined in the string predicate as $argument_index, where $argument_index is a decimal integer that\n specifies the position of the argument in the argument list. The first argument is referenced by $0, the second\n by $1, etc.\n <p>\n See <a href=\"https://docs.mongodb.com/realm-sdks/js/latest/tutorial-query-language.html\">these docs</a>\n for a more detailed description of the Realm Query Language.\n <p>\n <pre>\n Examples:\n {@code\n RealmQuery<Person> query = realm.where(Person.class);\n\n // Simple query\n query.rawPredicate(\"name = 'Jane'\");\n\n // Spaces in property name\n query.rawPredicate(\"my\\ property = 'Jane'\");\n\n // Multiple predicates\n query.rawPredicate(\"name = 'Jane' OR name = 'John'\")\n\n // Collection queries\n query.rawPredicate(\"children.@count > 3\")\n query.rawPredicate(\"ALL children.age > 18\")\n\n // Sub queries\n query.rawPredicate(\"SUBQUERY(children, $child, $child.age > 21 AND $child.gender = 'male').@count > 0\");\n\n // Sort, Distinct, Limit\n query.rawPredicate(\"name = 'Jane' SORT(lastName ASC) DISTINCT(city) LIMIT(5)\");\n\n // Arguments\n query.rawPredicate(\"name = $0 AND age > $1\", \"Jane\", 18);\n }\n </pre>", "name": "rawPredicate", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 2680, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "predicate a Realm Query Language predicate.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "a Realm Query Language predicate."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "predicate a Realm Query Language predicate."}], "parameterName": "predicate", "parameterComment": "a Realm Query Language predicate.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "arguments Realm values for the predicate.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm values for the predicate."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "arguments Realm values for the predicate."}], "parameterName": "arguments", "parameterComment": "Realm values for the predicate.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Create a text-based predicate using the Realm Query Language. This predicate can be combined\n with other raw or type safe predicates, it accepts Realm values as arguments.\n <p>\n Class and property names used in the raw predicate can be either the names defined in the\n Realm Model classes or the internal names defined using the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Create a text-based predicate using the Realm Query Language. This predicate can be combined\n with other raw or type safe predicates, it accepts Realm values as arguments.\n <p>\n Class and property names used in the raw predicate can be either the names defined in the\n Realm Model classes or the internal names defined using the "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Create a text-based predicate using the Realm Query Language."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "io.realm.annotations.RealmClass", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.annotations.RealmClass"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.annotations.RealmClass"}], "label": "", "referencedClassName": "io.realm.annotations.RealmClass", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.annotations.RealmClass", "typeName": "RealmClass", "qualifiedTypeName": "io.realm.annotations.RealmClass", "simpleTypeName": "RealmClass", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n or ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n or "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "or"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "io.realm.annotations.RealmField", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.annotations.RealmField"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.annotations.RealmField"}], "label": "", "referencedClassName": "io.realm.annotations.RealmField", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.annotations.RealmField", "typeName": "RealmField", "qualifiedTypeName": "io.realm.annotations.RealmField", "simpleTypeName": "RealmField", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " annotations. If a class or property name contains spaces those must\n be escaped.\n </p>\n Arguments are defined in the string predicate as $argument_index, where $argument_index is a decimal integer that\n specifies the position of the argument in the argument list. The first argument is referenced by $0, the second\n by $1, etc.\n <p>\n See <a href=\"https://docs.mongodb.com/realm-sdks/js/latest/tutorial-query-language.html\">these docs</a>\n for a more detailed description of the Realm Query Language.\n <p>\n <pre>\n Examples:\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " annotations. If a class or property name contains spaces those must\n be escaped.\n </p>\n Arguments are defined in the string predicate as $argument_index, where $argument_index is a decimal integer that\n specifies the position of the argument in the argument list. The first argument is referenced by $0, the second\n by $1, etc.\n <p>\n See <a href=\"https://docs.mongodb.com/realm-sdks/js/latest/tutorial-query-language.html\">these docs</a>\n for a more detailed description of the Realm Query Language.\n <p>\n <pre>\n Examples:\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "annotations."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "\n RealmQuery<Person> query = realm.where(Person.class);\n\n // Simple query\n query.rawPredicate(\"name = 'Jane'\");\n\n // Spaces in property name\n query.rawPredicate(\"my\\ property = 'Jane'\");\n\n // Multiple predicates\n query.rawPredicate(\"name = 'Jane' OR name = 'John'\")\n\n // Collection queries\n query.rawPredicate(\"children.@count > 3\")\n query.rawPredicate(\"ALL children.age > 18\")\n\n // Sub queries\n query.rawPredicate(\"SUBQUERY(children, $child, $child.age > 21 AND $child.gender = 'male').@count > 0\");\n\n // Sort, Distinct, Limit\n query.rawPredicate(\"name = 'Jane' SORT(lastName ASC) DISTINCT(city) LIMIT(5)\");\n\n // Arguments\n query.rawPredicate(\"name = $0 AND age > $1\", \"Jane\", 18);\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n RealmQuery<Person> query = realm.where(Person.class);\n\n // Simple query\n query.rawPredicate(\"name = 'Jane'\");\n\n // Spaces in property name\n query.rawPredicate(\"my\\ property = 'Jane'\");\n\n // Multiple predicates\n query.rawPredicate(\"name = 'Jane' OR name = 'John'\")\n\n // Collection queries\n query.rawPredicate(\"children.@count > 3\")\n query.rawPredicate(\"ALL children.age > 18\")\n\n // Sub queries\n query.rawPredicate(\"SUBQUERY(children, $child, $child.age > 21 AND $child.gender = 'male').@count > 0\");\n\n // Sort, Distinct, Limit\n query.rawPredicate(\"name = 'Jane' SORT(lastName ASC) DISTINCT(city) LIMIT(5)\");\n\n // Arguments\n query.rawPredicate(\"name = $0 AND age > $1\", \"Jane\", 18);\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmQuery<Person> query = realm.where(Person.class);\n\n // Simple query\n query.rawPredicate(\"name = 'Jane'\");\n\n // Spaces in property name\n query.rawPredicate(\"my\\ property = 'Jane'\");\n\n // Multiple predicates\n query.rawPredicate(\"name = 'Jane' OR name = 'John'\")\n\n // Collection queries\n query.rawPredicate(\"children.@count > 3\")\n query.rawPredicate(\"ALL children.age > 18\")\n\n // Sub queries\n query.rawPredicate(\"SUBQUERY(children, $child, $child.age > 21 AND $child.gender = 'male').@count > 0\");\n\n // Sort, Distinct, Limit\n query.rawPredicate(\"name = 'Jane' SORT(lastName ASC) DISTINCT(city) LIMIT(5)\");\n\n // Arguments\n query.rawPredicate(\"name = $0 AND age > $1\", \"Jane\", 18);"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n </pre>", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n </pre>"}], "firstSentenceTags": []}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Create a text-based predicate using the Realm Query Language.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Create a text-based predicate using the Realm Query Language."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Create a text-based predicate using the Realm Query Language."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.rawPredicate", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": true, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "predicate", "typeName": "String", "asString": "String predicate", "annotations": []}, {"type": {"_class": "Type", "asString": "java.lang.Object[]", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "[]", "isPrimitive": false, "elementType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "isClass": false, "isAnnotationType": false}, "name": "arguments", "typeName": "java.lang.Object[]", "asString": "java.lang.Object[] arguments", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if there is an syntax error.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if there is an syntax error."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if there is an syntax error."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if there is an syntax error.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "predicate a Realm Query Language predicate.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "a Realm Query Language predicate."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "predicate a Realm Query Language predicate."}], "parameterName": "predicate", "parameterComment": "a Realm Query Language predicate.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "arguments Realm values for the predicate.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm values for the predicate."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "arguments Realm values for the predicate."}], "parameterName": "arguments", "parameterComment": "Realm values for the predicate.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, java.lang.Object...)", "flatSignature": "(String, Object...)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Returns the {@link Realm} instance to which this query belongs.\n <p>\n Calling {@link Realm#close()} on the returned instance is discouraged as it is the same as\n calling it on the original Realm instance which may cause the Realm to fully close invalidating the\n query.", "name": "getRealm", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 2708, "column": 18, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "{@link Realm} instance this query belongs to.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Realm", "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " instance this query belongs to."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Realm", "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " instance this query belongs to."}]}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns the "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns the"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Realm", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm"}], "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " instance to which this query belongs.\n <p>\n Calling ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " instance to which this query belongs.\n <p>\n Calling "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "instance to which this query belongs."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Realm#close()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm#close()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm#close()"}], "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "close()"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " on the returned instance is discouraged as it is the same as\n calling it on the original Realm instance which may cause the Realm to fully close invalidating the\n query.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " on the returned instance is discouraged as it is the same as\n calling it on the original Realm instance which may cause the Realm to fully close invalidating the\n query."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "on the returned instance is discouraged as it is the same as\n calling it on the original Realm instance which may cause the Realm to fully close invalidating the\n query."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns the "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns the"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Realm", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm"}], "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " instance to which this query belongs.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " instance to which this query belongs."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "instance to which this query belongs."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.getRealm", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if the Realm is an instance of {@link DynamicRealm} or the\n                               {@link Realm} was already closed.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the Realm is an instance of "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "DynamicRealm", "label": "", "referencedClassName": "io.realm.DynamicRealm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.DynamicRealm", "typeName": "DynamicRealm", "qualifiedTypeName": "io.realm.DynamicRealm", "simpleTypeName": "DynamicRealm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the\n                               "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Realm", "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " was already closed."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if the Realm is an instance of "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "DynamicRealm", "label": "", "referencedClassName": "io.realm.DynamicRealm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.DynamicRealm", "typeName": "DynamicRealm", "qualifiedTypeName": "io.realm.DynamicRealm", "simpleTypeName": "DynamicRealm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the\n                               "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Realm", "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " was already closed."}], "exceptionName": "IllegalStateException", "exceptionComment": "if the Realm is an instance of {@link DynamicRealm} or the\n                               {@link Realm} was already closed.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"commentText": "Returns a textual description of this query.", "name": "getDescription", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 2724, "column": 19, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the textual description of the query.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the textual description of the query."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the textual description of the query."}]}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a textual description of this query.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a textual description of this query."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a textual description of this query."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a textual description of this query.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a textual description of this query."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a textual description of this query."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.getDescription", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"commentText": "Returns the internal Realm name of the type being queried.", "name": "getTypeQueried", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 2734, "column": 19, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the internal name of the Realm model class being queried.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the internal name of the Realm model class being queried."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the internal name of the Realm model class being queried."}]}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns the internal Realm name of the type being queried.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns the internal Realm name of the type being queried."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns the internal Realm name of the type being queried."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns the internal Realm name of the type being queried.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns the internal Realm name of the type being queried."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns the internal Realm name of the type being queried."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.getTypeQueried", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"commentText": "Finds the first object that fulfills the query conditions.\n <p>\n Launching heavy queries from the UI thread may result in a drop of frames or even ANRs. <b>We do not recommend\n doing so, but it is allowed by default.</b> If you want to prevent these behaviors you can obtain a Realm using\n a {@link RealmConfiguration} that explicitly sets\n {@link RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)} to {@code false}. This way you will be forced\n to launch your queries from a non-UI thread, otherwise calls to this method will throw a {@link RealmException}.\n Alternatively, you can use {@link #findFirstAsync()}.", "name": "findFirst", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 2758, "column": 14, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "the object found or {@code null} if no object matches the query conditions.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the object found or "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if no object matches the query conditions."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the object found or "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if no object matches the query conditions."}]}], "seeTags": [{"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "io.realm.RealmObject", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.RealmObject"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.RealmObject"}], "label": "", "referencedClassName": "io.realm.RealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}}], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the first object that fulfills the query conditions.\n <p>\n Launching heavy queries from the UI thread may result in a drop of frames or even ANRs. <b>We do not recommend\n doing so, but it is allowed by default.</b> If you want to prevent these behaviors you can obtain a Realm using\n a ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the first object that fulfills the query conditions.\n <p>\n Launching heavy queries from the UI thread may result in a drop of frames or even ANRs. <b>We do not recommend\n doing so, but it is allowed by default.</b> If you want to prevent these behaviors you can obtain a Realm using\n a "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the first object that fulfills the query conditions."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmConfiguration", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmConfiguration"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmConfiguration"}], "label": "", "referencedClassName": "io.realm.RealmConfiguration", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmConfiguration", "typeName": "RealmConfiguration", "qualifiedTypeName": "io.realm.RealmConfiguration", "simpleTypeName": "RealmConfiguration", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " that explicitly sets\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " that explicitly sets\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "that explicitly sets"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)"}], "label": "", "referencedClassName": "io.realm.RealmConfiguration.Builder", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmConfiguration.Builder", "typeName": "RealmConfiguration.Builder", "qualifiedTypeName": "io.realm.RealmConfiguration.Builder", "simpleTypeName": "Builder", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public static"}, "referencedMemberName": "allowQueriesOnUiThread(boolean)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " to ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " to "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "to"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "false"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "false"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ". This way you will be forced\n to launch your queries from a non-UI thread, otherwise calls to this method will throw a ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ". This way you will be forced\n to launch your queries from a non-UI thread, otherwise calls to this method will throw a "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmException", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmException"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmException"}], "label": "", "referencedClassName": "io.realm.exceptions.RealmException", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.exceptions.RealmException", "typeName": "RealmException", "qualifiedTypeName": "io.realm.exceptions.RealmException", "simpleTypeName": "RealmException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public final"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n Alternatively, you can use ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n Alternatively, you can use "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "#findFirstAsync()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#findFirstAsync()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#findFirstAsync()"}], "label": "", "referencedClassName": "io.realm.RealmQuery", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "findFirstAsync()"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the first object that fulfills the query conditions.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the first object that fulfills the query conditions."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the first object that fulfills the query conditions."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.findFirst", "modifierSpecifier": 1, "modifiers": "public", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "RealmException if called from the UI thread after opting out via {@link RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if called from the UI thread after opting out via "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)", "label": "", "referencedClassName": "io.realm.RealmConfiguration.Builder", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmConfiguration.Builder", "typeName": "RealmConfiguration.Builder", "qualifiedTypeName": "io.realm.RealmConfiguration.Builder", "simpleTypeName": "Builder", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public static"}, "referencedMemberName": "allowQueriesOnUiThread(boolean)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmException if called from the UI thread after opting out via "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)", "label": "", "referencedClassName": "io.realm.RealmConfiguration.Builder", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmConfiguration.Builder", "typeName": "RealmConfiguration.Builder", "qualifiedTypeName": "io.realm.RealmConfiguration.Builder", "simpleTypeName": "Builder", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public static"}, "referencedMemberName": "allowQueriesOnUiThread(boolean)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "exceptionName": "RealmException", "exceptionComment": "if called from the UI thread after opting out via {@link RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)}.", "exceptionType": {"_class": "ClassDoc", "asString": "io.realm.exceptions.RealmException", "typeName": "RealmException", "qualifiedTypeName": "io.realm.exceptions.RealmException", "simpleTypeName": "RealmException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}}, {"commentText": "Similar to {@link #findFirst()} but runs asynchronously on a worker thread. An listener should be registered to\n the returned {@link RealmObject} to get the notification when query completes. The registered listener will also\n be triggered if there are changes made to the queried {@link RealmObject}. If the {@link RealmObject} is deleted,\n the listener will be called one last time and then stop. The query will not be re-run.", "name": "findFirstAsync", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 2782, "column": 14, "file": "./realm/realm-library/src/main/java/io/realm/RealmQuery.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "immediately an empty {@link RealmObject} with {@code isLoaded() == false}. Trying to access any field on\n the returned object before it is loaded will throw an {@code IllegalStateException}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "immediately an empty "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmObject", "label": "", "referencedClassName": "io.realm.RealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " with "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "isLoaded() == false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ". Trying to access any field on\n the returned object before it is loaded will throw an "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "IllegalStateException"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "immediately an empty "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmObject", "label": "", "referencedClassName": "io.realm.RealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " with "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "isLoaded() == false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Similar to ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Similar to "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Similar to"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "#findFirst()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#findFirst()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#findFirst()"}], "label": "", "referencedClassName": "io.realm.RealmQuery", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "findFirst()"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " but runs asynchronously on a worker thread. An listener should be registered to\n the returned ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " but runs asynchronously on a worker thread. An listener should be registered to\n the returned "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "but runs asynchronously on a worker thread."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmObject", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject"}], "label": "", "referencedClassName": "io.realm.RealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " to get the notification when query completes. The registered listener will also\n be triggered if there are changes made to the queried ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " to get the notification when query completes. The registered listener will also\n be triggered if there are changes made to the queried "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "to get the notification when query completes."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmObject", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject"}], "label": "", "referencedClassName": "io.realm.RealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ". If the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ". If the "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmObject", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject"}], "label": "", "referencedClassName": "io.realm.RealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " is deleted,\n the listener will be called one last time and then stop. The query will not be re-run.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " is deleted,\n the listener will be called one last time and then stop. The query will not be re-run."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "is deleted,\n the listener will be called one last time and then stop."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Similar to ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Similar to "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Similar to"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "#findFirst()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#findFirst()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#findFirst()"}], "label": "", "referencedClassName": "io.realm.RealmQuery", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "findFirst()"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " but runs asynchronously on a worker thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " but runs asynchronously on a worker thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "but runs asynchronously on a worker thread."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmQuery.findFirstAsync", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if this is called on a non-looper thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if this is called on a non-looper thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if this is called on a non-looper thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if this is called on a non-looper thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}}], "constructors": [], "innerClasses": []}