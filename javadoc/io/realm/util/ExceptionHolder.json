{"commentText": "Utility class for wrapping exceptions from background threads in unit tests.\n It makes patterns like this possible:\n\n {@code\n   final CountDownLatch taskDone = new CountDownLatch(1);\n   final ExceptionHolder bgError = new ExceptionHolder();\n   new Thread(new Runnable() {", "tags": [{"_class": "Tag", "name": "@Override", "kind": "@Override", "text": "public void run() {\n          try {\n              // Error prone code ...\n          } catch (Exception e) {\n              bgError.setException(e);\n          } finall {\n              taskDone.countDown();\n          }\n      }\n   }).start()\n   taskDone.await();\n   bgError.checkFailure();\n }", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "public void run() {\n          try {\n              // Error prone code ...\n          } catch (Exception e) {\n              bgError.setException(e);\n          } finall {\n              taskDone.countDown();\n          }\n      }\n   }).start()\n   taskDone.await();\n   bgError.checkFailure();\n }"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "public void run() {\n          try {\n              // Error prone code ..."}]}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Utility class for wrapping exceptions from background threads in unit tests.\n It makes patterns like this possible:\n\n {@code\n   final CountDownLatch taskDone = new CountDownLatch(1);\n   final ExceptionHolder bgError = new ExceptionHolder();\n   new Thread(new Runnable() {", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Utility class for wrapping exceptions from background threads in unit tests.\n It makes patterns like this possible:\n\n {@code\n   final CountDownLatch taskDone = new CountDownLatch(1);\n   final ExceptionHolder bgError = new ExceptionHolder();\n   new Thread(new Runnable() {"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Utility class for wrapping exceptions from background threads in unit tests."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Utility class for wrapping exceptions from background threads in unit tests.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Utility class for wrapping exceptions from background threads in unit tests."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Utility class for wrapping exceptions from background threads in unit tests."}]}], "name": "ExceptionHolder", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": false, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": true, "isClass": true, "isIncluded": true, "position": {"line": 49, "column": 8, "file": "realm/realm-library/src/androidTest/java/io/realm/util/ExceptionHolder.java"}, "_class": "ParsedClassDoc", "containingPackage": {"_class": "PackageDoc", "name": "io.realm.util"}, "qualifiedName": "io.realm.util.ExceptionHolder", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "asString": "io.realm.util.ExceptionHolder", "typeName": "ExceptionHolder", "qualifiedTypeName": "io.realm.util.ExceptionHolder", "simpleTypeName": "ExceptionHolder", "dimension": "", "isPrimitive": false, "isAbstract": false, "isSerializable": false, "isExternalizable": false, "serializationMethods": [], "serializableFields": [], "definesSerializableFields": false, "superclasses": [{"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "inheritedMethods": {"java.lang.Object": ["getClass", "hashCode", "equals", "clone", "toString", "notify", "notifyAll", "wait", "wait", "wait", "finalize"]}, "interfaceTypes": [], "typeParameters": [], "typeParamTags": [], "fields": [], "enumConstants": [], "methods": [{"commentText": "Sets the exception held by this container. This is an one-shot operation.", "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "throwable error to save.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "error to save."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "throwable error to save."}], "parameterName": "throwable", "parameterComment": "error to save.", "isTypeParameter": false}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if an exception have already been put into this holder.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if an exception have already been put into this holder."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if an exception have already been put into this holder."}], "exceptionName": "IllegalStateException", "exceptionComment": "if an exception have already been put into this holder.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the exception held by this container. This is an one-shot operation.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the exception held by this container. This is an one-shot operation."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the exception held by this container."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the exception held by this container.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the exception held by this container."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the exception held by this container."}]}], "name": "setException", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 59, "column": 17, "file": "realm/realm-library/src/androidTest/java/io/realm/util/ExceptionHolder.java"}, "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.util.ExceptionHolder", "typeName": "ExceptionHolder", "qualifiedTypeName": "io.realm.util.ExceptionHolder", "simpleTypeName": "ExceptionHolder", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm.util"}, "qualifiedName": "io.realm.util.ExceptionHolder.setException", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.Throwable", "typeName": "Throwable", "qualifiedTypeName": "java.lang.Throwable", "simpleTypeName": "Throwable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "throwable", "typeName": "Throwable", "asString": "Throwable throwable", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if an exception have already been put into this holder.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if an exception have already been put into this holder."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if an exception have already been put into this holder."}], "exceptionName": "IllegalStateException", "exceptionComment": "if an exception have already been put into this holder.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "throwable error to save.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "error to save."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "throwable error to save."}], "parameterName": "throwable", "parameterComment": "error to save.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.Throwable)", "flatSignature": "(Throwable)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "void", "typeName": "void", "qualifiedTypeName": "void", "simpleTypeName": "void", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Sets a custom error message that can be used instead of setting an exception.\n This will still trigger {@link #checkFailure()}.", "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "message error message", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "error message"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "message error message"}], "parameterName": "message", "parameterComment": "error message", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets a custom error message that can be used instead of setting an exception.\n This will still trigger ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets a custom error message that can be used instead of setting an exception.\n This will still trigger "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets a custom error message that can be used instead of setting an exception."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "#checkFailure()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#checkFailure()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#checkFailure()"}], "label": "", "referencedClassName": "io.realm.util.ExceptionHolder", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.util.ExceptionHolder", "typeName": "ExceptionHolder", "qualifiedTypeName": "io.realm.util.ExceptionHolder", "simpleTypeName": "ExceptionHolder", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "checkFailure()"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets a custom error message that can be used instead of setting an exception.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets a custom error message that can be used instead of setting an exception."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets a custom error message that can be used instead of setting an exception."}]}], "name": "setError", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 72, "column": 17, "file": "realm/realm-library/src/androidTest/java/io/realm/util/ExceptionHolder.java"}, "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.util.ExceptionHolder", "typeName": "ExceptionHolder", "qualifiedTypeName": "io.realm.util.ExceptionHolder", "simpleTypeName": "ExceptionHolder", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm.util"}, "qualifiedName": "io.realm.util.ExceptionHolder.setError", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "message", "typeName": "String", "asString": "String message", "annotations": []}], "throwsTags": [], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "message error message", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "error message"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "message error message"}], "parameterName": "message", "parameterComment": "error message", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String)", "flatSignature": "(String)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "void", "typeName": "void", "qualifiedTypeName": "void", "simpleTypeName": "void", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Returns any saved exception.", "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "{@link Throwable} held by this container", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Throwable", "label": "", "referencedClassName": "java.lang.Throwable", "referencedClass": {"_class": "ClassDoc", "asString": "java.lang.Throwable", "typeName": "Throwable", "qualifiedTypeName": "java.lang.Throwable", "simpleTypeName": "Throwable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " held by this container"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Throwable", "label": "", "referencedClassName": "java.lang.Throwable", "referencedClass": {"_class": "ClassDoc", "asString": "java.lang.Throwable", "typeName": "Throwable", "qualifiedTypeName": "java.lang.Throwable", "simpleTypeName": "Throwable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " held by this container"}]}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns any saved exception.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns any saved exception."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns any saved exception."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns any saved exception.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns any saved exception."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns any saved exception."}]}], "name": "getException", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 81, "column": 22, "file": "realm/realm-library/src/androidTest/java/io/realm/util/ExceptionHolder.java"}, "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.util.ExceptionHolder", "typeName": "ExceptionHolder", "qualifiedTypeName": "io.realm.util.ExceptionHolder", "simpleTypeName": "ExceptionHolder", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm.util"}, "qualifiedName": "io.realm.util.ExceptionHolder.getException", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ClassDoc", "asString": "java.lang.Throwable", "typeName": "Throwable", "qualifiedTypeName": "java.lang.Throwable", "simpleTypeName": "Throwable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"commentText": "Checks if an exception has been set and fails the unit test if that is the case.", "tags": [], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if an exception has been set and fails the unit test if that is the case.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if an exception has been set and fails the unit test if that is the case."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if an exception has been set and fails the unit test if that is the case."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if an exception has been set and fails the unit test if that is the case.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if an exception has been set and fails the unit test if that is the case."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if an exception has been set and fails the unit test if that is the case."}]}], "name": "checkFailure", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 88, "column": 17, "file": "realm/realm-library/src/androidTest/java/io/realm/util/ExceptionHolder.java"}, "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.util.ExceptionHolder", "typeName": "ExceptionHolder", "qualifiedTypeName": "io.realm.util.ExceptionHolder", "simpleTypeName": "ExceptionHolder", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm.util"}, "qualifiedName": "io.realm.util.ExceptionHolder.checkFailure", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "void", "typeName": "void", "qualifiedTypeName": "void", "simpleTypeName": "void", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}], "constructors": [{"commentText": "", "tags": [], "seeTags": [], "inlineTags": [], "firstSentenceTags": [], "name": "ExceptionHolder", "isField": false, "isEnumConstant": false, "isConstructor": true, "isMethod": false, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 49, "column": 8, "file": "realm/realm-library/src/androidTest/java/io/realm/util/ExceptionHolder.java"}, "_class": "ExecutableMemberDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.util.ExceptionHolder", "typeName": "ExceptionHolder", "qualifiedTypeName": "io.realm.util.ExceptionHolder", "simpleTypeName": "ExceptionHolder", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm.util"}, "qualifiedName": "io.realm.util.ExceptionHolder", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": []}], "innerClasses": []}