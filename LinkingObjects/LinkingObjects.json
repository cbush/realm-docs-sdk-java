{"commentText": "Annotation for defining a reverse relationship from one class to another. This annotation can\n only be added to a field of the type {@code RealmResults}.\n<pre>\n To expose reverse relationships for use, create a declaration as follows:\n {@code\n\n public class Person extends RealmObject {\n   String name;\n   Dog dog; // Normal relation\n }\n\n public class Dog extends RealmObject {\n   // This holds all Person objects with a relation to this Dog object (= linking objects)\n   \\@LinkingObjects(\"dog\")\n   final RealmResults&gt;Person&lt; owners = null;\n }\n\n // Find all Dogs with at least one owner named John\n realm.where(Dog.class).equalTo(\"owners.name\", \"John\").findAll();\n }\n </pre>\n In the above example `Person` is related to `Dog` through the field `dog`.\n This in turn means that an implicit reverse relationship exists between the class `Dog`\n and the class `Person`. This inverse relationship is made public and queryable by the `RealmResults`\n field annotated with `@LinkingObject`. This makes it possible to query properties of the dogs owner\n without having to manually maintain a \"owner\" field in the `Dog` class.\n <p>\n Linking objects have the following properties:\n <ul>\n     <li>The link is maintained by Realm and only works for managed objects.</li>\n     <li>They can be queried just like normal relation.</li>\n     <li>They can be followed just like normal relation.</li>\n     <li>They are ignored when doing a `copyToRealm().`</li>\n     <li>They are ignored when doing a `copyFromRealm().`</li>\n     <li>They are ignored when using the various `createObjectFromJson*` and `createAllFromJson*` methods.</li>\n     <li>Listeners on an object with a `@LinkingObject` field will not be triggered if the linking objects change,\n     e.g: if another object drops a reference to this object.</li>\n </ul>\n <p>\n In addition, they have the following restrictions:\n <ul>\n     <li>{@literal @}Ignore takes precedence.  A {@literal @}LinkingObjects annotation on {@literal @}Ignore field will be ignored.</li>\n     <li>The annotated field cannot be {@literal @}Required.</li>\n     <li>The annotated field must be `final`.</li>\n     <li>The annotation argument (the name of the backlinked field) is required.</li>\n     <li>The annotation argument must be a simple field name.  It cannot contain periods ('.').</li>\n     <li>The annotated field must be of type `RealmResults&lt;T&gt;` where T is concrete class that extends `RealmModel`.</li>\n </ul>\n\n Note that when the source of the reverse reference (`dog` in the case above) is a `List`, there is a reverse\n reference for each forward reference, even if both forward references are to the same object.\n If the `Person` class above were defined as:\n {@code\n\n public class DogLover extends RealmObject {\n   String name;\n   List<Dog> dogs = new ArrayList<Dog>;\n }\n }\n then the following code executes without error\n {@code\n\n Dog fido = new Dog();\n DogLover john = new DogLover()\n john.dogs.add(fido);\n john.dogs.add(fido);\n assert john.dogs.size() == 2;\n assert fido.owners.size() == 2;\n }\n <p>\n Querying inverse relationship is like querying any {@code RealmResults}. This means that an inverse relationship\n cannot be {@code null} but it can be empty (length is 0). It is possible to query fields in the source class. This is\n equivalent to link queries. Please read <a href=\"https://realm.io/docs/java/latest/#link-queries\">for more\n information</a>.", "tags": [], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Annotation for defining a reverse relationship from one class to another. This annotation can\n only be added to a field of the type ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Annotation for defining a reverse relationship from one class to another. This annotation can\n only be added to a field of the type "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Annotation for defining a reverse relationship from one class to another."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "RealmResults", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmResults"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmResults"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n<pre>\n To expose reverse relationships for use, create a declaration as follows:\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n<pre>\n To expose reverse relationships for use, create a declaration as follows:\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "\n\n public class Person extends RealmObject {\n   String name;\n   Dog dog; // Normal relation\n }\n\n public class Dog extends RealmObject {\n   // This holds all Person objects with a relation to this Dog object (= linking objects)\n   \\@LinkingObjects(\"dog\")\n   final RealmResults&gt;Person&lt; owners = null;\n }\n\n // Find all Dogs with at least one owner named John\n realm.where(Dog.class).equalTo(\"owners.name\", \"John\").findAll();\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n\n public class Person extends RealmObject {\n   String name;\n   Dog dog; // Normal relation\n }\n\n public class Dog extends RealmObject {\n   // This holds all Person objects with a relation to this Dog object (= linking objects)\n   \\@LinkingObjects(\"dog\")\n   final RealmResults&gt;Person&lt; owners = null;\n }\n\n // Find all Dogs with at least one owner named John\n realm.where(Dog.class).equalTo(\"owners.name\", \"John\").findAll();\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "public class Person extends RealmObject {\n   String name;\n   Dog dog; // Normal relation\n }\n\n public class Dog extends RealmObject {\n   // This holds all Person objects with a relation to this Dog object (= linking objects)\n   \\@LinkingObjects(\"dog\")\n   final RealmResults&gt;Person&lt; owners = null;\n }\n\n // Find all Dogs with at least one owner named John\n realm.where(Dog.class).equalTo(\"owners.name\", \"John\").findAll();"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n </pre>\n In the above example `Person` is related to `Dog` through the field `dog`.\n This in turn means that an implicit reverse relationship exists between the class `Dog`\n and the class `Person`. This inverse relationship is made public and queryable by the `RealmResults`\n field annotated with `@LinkingObject`. This makes it possible to query properties of the dogs owner\n without having to manually maintain a \"owner\" field in the `Dog` class.\n <p>\n Linking objects have the following properties:\n <ul>\n     <li>The link is maintained by Realm and only works for managed objects.</li>\n     <li>They can be queried just like normal relation.</li>\n     <li>They can be followed just like normal relation.</li>\n     <li>They are ignored when doing a `copyToRealm().`</li>\n     <li>They are ignored when doing a `copyFromRealm().`</li>\n     <li>They are ignored when using the various `createObjectFromJson*` and `createAllFromJson*` methods.</li>\n     <li>Listeners on an object with a `@LinkingObject` field will not be triggered if the linking objects change,\n     e.g: if another object drops a reference to this object.</li>\n </ul>\n <p>\n In addition, they have the following restrictions:\n <ul>\n     <li>", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n </pre>\n In the above example `Person` is related to `Dog` through the field `dog`.\n This in turn means that an implicit reverse relationship exists between the class `Dog`\n and the class `Person`. This inverse relationship is made public and queryable by the `RealmResults`\n field annotated with `@LinkingObject`. This makes it possible to query properties of the dogs owner\n without having to manually maintain a \"owner\" field in the `Dog` class.\n <p>\n Linking objects have the following properties:\n <ul>\n     <li>The link is maintained by Realm and only works for managed objects.</li>\n     <li>They can be queried just like normal relation.</li>\n     <li>They can be followed just like normal relation.</li>\n     <li>They are ignored when doing a `copyToRealm().`</li>\n     <li>They are ignored when doing a `copyFromRealm().`</li>\n     <li>They are ignored when using the various `createObjectFromJson*` and `createAllFromJson*` methods.</li>\n     <li>Listeners on an object with a `@LinkingObject` field will not be triggered if the linking objects change,\n     e.g: if another object drops a reference to this object.</li>\n </ul>\n <p>\n In addition, they have the following restrictions:\n <ul>\n     <li>"}], "firstSentenceTags": []}, {"_class": "Tag", "name": "@literal", "kind": "@literal", "text": "@", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "@"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "@"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "Ignore takes precedence.  A ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Ignore takes precedence.  A "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Ignore takes precedence."}]}, {"_class": "Tag", "name": "@literal", "kind": "@literal", "text": "@", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "@"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "@"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "LinkingObjects annotation on ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "LinkingObjects annotation on "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "LinkingObjects annotation on"}]}, {"_class": "Tag", "name": "@literal", "kind": "@literal", "text": "@", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "@"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "@"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "Ignore field will be ignored.</li>\n     <li>The annotated field cannot be ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Ignore field will be ignored.</li>\n     <li>The annotated field cannot be "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Ignore field will be ignored.</li>\n     <li>The annotated field cannot be"}]}, {"_class": "Tag", "name": "@literal", "kind": "@literal", "text": "@", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "@"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "@"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "Required.</li>\n     <li>The annotated field must be `final`.</li>\n     <li>The annotation argument (the name of the backlinked field) is required.</li>\n     <li>The annotation argument must be a simple field name.  It cannot contain periods ('.').</li>\n     <li>The annotated field must be of type `RealmResults&lt;T&gt;` where T is concrete class that extends `RealmModel`.</li>\n </ul>\n\n Note that when the source of the reverse reference (`dog` in the case above) is a `List`, there is a reverse\n reference for each forward reference, even if both forward references are to the same object.\n If the `Person` class above were defined as:\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Required.</li>\n     <li>The annotated field must be `final`.</li>\n     <li>The annotation argument (the name of the backlinked field) is required.</li>\n     <li>The annotation argument must be a simple field name.  It cannot contain periods ('.').</li>\n     <li>The annotated field must be of type `RealmResults&lt;T&gt;` where T is concrete class that extends `RealmModel`.</li>\n </ul>\n\n Note that when the source of the reverse reference (`dog` in the case above) is a `List`, there is a reverse\n reference for each forward reference, even if both forward references are to the same object.\n If the `Person` class above were defined as:\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Required.</li>\n     <li>The annotated field must be `final`.</li>\n     <li>The annotation argument (the name of the backlinked field) is required.</li>\n     <li>The annotation argument must be a simple field name."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "public class DogLover extends RealmObject {\n   String name;\n   List<Dog> dogs = new ArrayList<Dog>;\n }\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "public class DogLover extends RealmObject {\n   String name;\n   List<Dog> dogs = new ArrayList<Dog>;\n }\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "public class DogLover extends RealmObject {\n   String name;\n   List<Dog> dogs = new ArrayList<Dog>;\n }"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n then the following code executes without error\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n then the following code executes without error\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "then the following code executes without error"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "Dog fido = new Dog();\n DogLover john = new DogLover()\n john.dogs.add(fido);\n john.dogs.add(fido);\n assert john.dogs.size() == 2;\n assert fido.owners.size() == 2;\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Dog fido = new Dog();\n DogLover john = new DogLover()\n john.dogs.add(fido);\n john.dogs.add(fido);\n assert john.dogs.size() == 2;\n assert fido.owners.size() == 2;\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Dog fido = new Dog();\n DogLover john = new DogLover()\n john.dogs.add(fido);\n john.dogs.add(fido);\n assert john.dogs.size() == 2;\n assert fido.owners.size() == 2;"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n <p>\n Querying inverse relationship is like querying any ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n <p>\n Querying inverse relationship is like querying any "}], "firstSentenceTags": []}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "RealmResults", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmResults"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmResults"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ". This means that an inverse relationship\n cannot be ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ". This means that an inverse relationship\n cannot be "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "null"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "null"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " but it can be empty (length is 0). It is possible to query fields in the source class. This is\n equivalent to link queries. Please read <a href=\"https://realm.io/docs/java/latest/#link-queries\">for more\n information</a>.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " but it can be empty (length is 0). It is possible to query fields in the source class. This is\n equivalent to link queries. Please read <a href=\"https://realm.io/docs/java/latest/#link-queries\">for more\n information</a>."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "but it can be empty (length is 0)."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Annotation for defining a reverse relationship from one class to another.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Annotation for defining a reverse relationship from one class to another."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Annotation for defining a reverse relationship from one class to another."}]}], "name": "LinkingObjects", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": false, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": true, "isOrdinaryClass": false, "isClass": true, "isIncluded": true, "position": {"line": 102, "column": 9, "file": "./realm-annotations/src/main/java/io/realm/annotations/LinkingObjects.java"}, "_class": "ParsedClassDoc", "containingPackage": {"_class": "PackageDoc", "name": "io.realm.annotations"}, "qualifiedName": "io.realm.annotations.LinkingObjects", "modifierSpecifier": 513, "modifiers": "public interface", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "java.lang.annotation.Retention", "typeName": "Retention", "qualifiedTypeName": "java.lang.annotation.Retention", "simpleTypeName": "Retention", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}, "elementValues": [{"element": {"commentText": "", "tags": [], "seeTags": [], "inlineTags": [], "firstSentenceTags": [], "name": "value", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": false, "isAnnotationTypeElement": true, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": false, "position": {"line": 0, "column": 0, "file": "Retention.java"}, "_class": "AnnotationTypeElementDoc", "containingClass": {"_class": "ClassDoc", "asString": "java.lang.annotation.Retention", "typeName": "Retention", "qualifiedTypeName": "java.lang.annotation.Retention", "simpleTypeName": "Retention", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}, "containingPackage": {"_class": "PackageDoc", "name": "java.lang.annotation"}, "qualifiedName": "java.lang.annotation.Retention.value", "modifierSpecifier": 1025, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ClassDoc", "asString": "java.lang.annotation.RetentionPolicy", "typeName": "RetentionPolicy", "qualifiedTypeName": "java.lang.annotation.RetentionPolicy", "simpleTypeName": "RetentionPolicy", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, "value": "java.lang.annotation.RetentionPolicy.RUNTIME"}], "isSynthesized": false}, {"annotationType": {"_class": "ClassDoc", "asString": "java.lang.annotation.Target", "typeName": "Target", "qualifiedTypeName": "java.lang.annotation.Target", "simpleTypeName": "Target", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}, "elementValues": [{"element": {"commentText": "", "tags": [], "seeTags": [], "inlineTags": [], "firstSentenceTags": [], "name": "value", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": false, "isAnnotationTypeElement": true, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": false, "position": {"line": 0, "column": 0, "file": "Target.java"}, "_class": "AnnotationTypeElementDoc", "containingClass": {"_class": "ClassDoc", "asString": "java.lang.annotation.Target", "typeName": "Target", "qualifiedTypeName": "java.lang.annotation.Target", "simpleTypeName": "Target", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}, "containingPackage": {"_class": "PackageDoc", "name": "java.lang.annotation"}, "qualifiedName": "java.lang.annotation.Target.value", "modifierSpecifier": 1025, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "java.lang.annotation.ElementType[]", "typeName": "ElementType", "qualifiedTypeName": "java.lang.annotation.ElementType", "simpleTypeName": "ElementType", "dimension": "[]", "isPrimitive": false, "elementType": {"_class": "ClassDoc", "asString": "java.lang.annotation.ElementType", "typeName": "ElementType", "qualifiedTypeName": "java.lang.annotation.ElementType", "simpleTypeName": "ElementType", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "isClass": false, "isAnnotationType": false}}, "value": "java.lang.annotation.ElementType.FIELD"}], "isSynthesized": false}], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "asString": "io.realm.annotations.LinkingObjects", "typeName": "LinkingObjects", "qualifiedTypeName": "io.realm.annotations.LinkingObjects", "simpleTypeName": "LinkingObjects", "dimension": "", "isPrimitive": false, "isAbstract": true, "isSerializable": false, "isExternalizable": false, "serializationMethods": [], "serializableFields": [], "definesSerializableFields": false, "interfaceTypes": [{"_class": "ClassDoc", "asString": "java.lang.annotation.Annotation", "typeName": "Annotation", "qualifiedTypeName": "java.lang.annotation.Annotation", "simpleTypeName": "Annotation", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "typeParameters": [], "typeParamTags": [], "fields": [], "enumConstants": [], "methods": [], "constructors": [], "innerClasses": [], "elements": [{"commentText": "The name of a field that contains a relation to an instance of the\n class containing this annotation.  If this argument is not provided\n the annotation processor will abort with an {@code IllegalArgumentException}.", "tags": [], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "The name of a field that contains a relation to an instance of the\n class containing this annotation.  If this argument is not provided\n the annotation processor will abort with an ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "The name of a field that contains a relation to an instance of the\n class containing this annotation.  If this argument is not provided\n the annotation processor will abort with an "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "The name of a field that contains a relation to an instance of the\n class containing this annotation."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "IllegalArgumentException", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "The name of a field that contains a relation to an instance of the\n class containing this annotation.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "The name of a field that contains a relation to an instance of the\n class containing this annotation."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "The name of a field that contains a relation to an instance of the\n class containing this annotation."}]}], "name": "value", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": false, "isAnnotationTypeElement": true, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 108, "column": 12, "file": "./realm-annotations/src/main/java/io/realm/annotations/LinkingObjects.java"}, "_class": "AnnotationTypeElementDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.annotations.LinkingObjects", "typeName": "LinkingObjects", "qualifiedTypeName": "io.realm.annotations.LinkingObjects", "simpleTypeName": "LinkingObjects", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm.annotations"}, "qualifiedName": "io.realm.annotations.LinkingObjects.value", "modifierSpecifier": 1025, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "defaultValue": "\"\""}]}