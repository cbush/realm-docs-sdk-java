
.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

io.realm.coroutines.FlowFactory
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _io_realm_coroutines_FlowFactory:

Factory interface for creating Kotlin s for Realm classes.


Method Summary
==============

.. list-table::
   :header-rows: 1
   
   * - Modifier and Type
     - Method and Description
   
   * - public **<any> (?)**
     - :ref:`from <io_realm_coroutines_FlowFactory_from__Realm__>` (:ref:`Realm <io_realm_Realm>` realm)
       
       Creates a for a .
       
       
       
       
       
   
   * - public **<any> (?)**
     - :ref:`from <io_realm_coroutines_FlowFactory_from__DynamicRealm__>` (:ref:`DynamicRealm <io_realm_DynamicRealm>` dynamicRealm)
       
       Creates a for a .
       
       
       
       
       
   
   * - public **<any> (?)**
     - :ref:`from <io_realm_coroutines_FlowFactory_from__Realm__RealmResults_T___>` <**T (?)** >(:ref:`Realm <io_realm_Realm>` realm, :ref:`io.realm.RealmResults\<T> <io_realm_RealmResults>` results)
       
       Creates a for a .
       
       
       
       
       
   
   * - public **<any> (?)**
     - :ref:`changesetFrom <io_realm_coroutines_FlowFactory_changesetFrom__Realm__RealmResults_T___>` <**T (?)** >(:ref:`Realm <io_realm_Realm>` realm, :ref:`io.realm.RealmResults\<T> <io_realm_RealmResults>` results)
       
       Creates a for a instance.
       
       
       
       
       
   
   * - public **<any> (?)**
     - :ref:`from <io_realm_coroutines_FlowFactory_from__DynamicRealm__RealmResults_T___>` <**T (?)** >(:ref:`DynamicRealm <io_realm_DynamicRealm>` dynamicRealm, :ref:`io.realm.RealmResults\<T> <io_realm_RealmResults>` results)
       
       Creates a for a .
       
       
       
       
       
   
   * - public **<any> (?)**
     - :ref:`changesetFrom <io_realm_coroutines_FlowFactory_changesetFrom__DynamicRealm__RealmResults_T___>` <**T (?)** >(:ref:`DynamicRealm <io_realm_DynamicRealm>` dynamicRealm, :ref:`io.realm.RealmResults\<T> <io_realm_RealmResults>` results)
       
       Creates a for a instance.
       
       
       
       
       
   
   * - public **<any> (?)**
     - :ref:`from <io_realm_coroutines_FlowFactory_from__Realm__RealmList_T___>` <**T (?)** >(:ref:`Realm <io_realm_Realm>` realm, :ref:`io.realm.RealmList\<T> <io_realm_RealmList>` realmList)
       
       Creates a for a .
       
       
       
       
       
   
   * - public **<any> (?)**
     - :ref:`changesetFrom <io_realm_coroutines_FlowFactory_changesetFrom__Realm__RealmList_T___>` <**T (?)** >(:ref:`Realm <io_realm_Realm>` realm, :ref:`io.realm.RealmList\<T> <io_realm_RealmList>` list)
       
       Creates a for a .
       
       
       
       
       
   
   * - public **<any> (?)**
     - :ref:`from <io_realm_coroutines_FlowFactory_from__DynamicRealm__RealmList_T___>` <**T (?)** >(:ref:`DynamicRealm <io_realm_DynamicRealm>` dynamicRealm, :ref:`io.realm.RealmList\<T> <io_realm_RealmList>` realmList)
       
       Creates a for a .
       
       
       
       
       
   
   * - public **<any> (?)**
     - :ref:`changesetFrom <io_realm_coroutines_FlowFactory_changesetFrom__DynamicRealm__RealmList_T___>` <**T (?)** >(:ref:`DynamicRealm <io_realm_DynamicRealm>` dynamicRealm, :ref:`io.realm.RealmList\<T> <io_realm_RealmList>` list)
       
       Creates a for a .
       
       
       
       
       
   
   * - public **<any> (?)**
     - :ref:`from <io_realm_coroutines_FlowFactory_from__Realm__T__>` <**T (?)** >(:ref:`Realm <io_realm_Realm>` realm, **T (?)** realmObject)
       
       Creates a for a .
       
       
       
       
       
   
   * - public **<any> (?)**
     - :ref:`changesetFrom <io_realm_coroutines_FlowFactory_changesetFrom__Realm__T__>` <**T (?)** >(:ref:`Realm <io_realm_Realm>` realm, **T (?)** realmObject)
       
       Creates a for a .
       
       
       
       
       
   
   * - public **<any> (?)**
     - :ref:`from <io_realm_coroutines_FlowFactory_from__DynamicRealm__DynamicRealmObject__>` (:ref:`DynamicRealm <io_realm_DynamicRealm>` dynamicRealm, :ref:`DynamicRealmObject <io_realm_DynamicRealmObject>` dynamicRealmObject)
       
       Creates a for a .
       
       
       
       
       
   
   * - public **<any> (?)**
     - :ref:`changesetFrom <io_realm_coroutines_FlowFactory_changesetFrom__DynamicRealm__DynamicRealmObject__>` (:ref:`DynamicRealm <io_realm_DynamicRealm>` dynamicRealm, :ref:`DynamicRealmObject <io_realm_DynamicRealmObject>` dynamicRealmObject)
       
       Creates a for a .
       
       
       
       
       
   
   
Method Detail
=============

.. _io_realm_coroutines_FlowFactory_from__Realm__:

from
----

public **<any> (?)** from (:ref:`Realm <io_realm_Realm>` realm)

Creates a for a . It should emit the initial state of the Realm when subscribed to and on each subsequent update of the Realm.


Parameters
~~~~~~~~~~

- realm - instance being observed for changes to be emitted by the flow.
   
   
   

.. _io_realm_coroutines_FlowFactory_from__DynamicRealm__:

from
----

public **<any> (?)** from (:ref:`DynamicRealm <io_realm_DynamicRealm>` dynamicRealm)

Creates a for a . It should emit the initial state of the Realm when subscribed to and on each subsequent update of the Realm.


Parameters
~~~~~~~~~~

- dynamicRealm - instance being observed for changes to be emitted by the flow.
   
   
   

.. _io_realm_coroutines_FlowFactory_from__Realm__RealmResults_T___:

from
----

public **<any> (?)** from <**T (?)** >(:ref:`Realm <io_realm_Realm>` realm, :ref:`io.realm.RealmResults\<T> <io_realm_RealmResults>` results)

Creates a for a . It should emit the initial RealmResult when subscribed to and on each subsequent update of the RealmResults.


Type Parameters
~~~~~~~~~~~~~~~

- T - type of RealmObject.
   
   
   

Parameters
~~~~~~~~~~

- results - instance being observed for changes to be emitted by the flow.
   
   
   
- realm - instance from where the results are coming.
   
   
   

.. _io_realm_coroutines_FlowFactory_changesetFrom__Realm__RealmResults_T___:

changesetFrom
-------------

public **<any> (?)** changesetFrom <**T (?)** >(:ref:`Realm <io_realm_Realm>` realm, :ref:`io.realm.RealmResults\<T> <io_realm_RealmResults>` results)

Creates a for a instance. It should emit the initial results when subscribed to and on each subsequent update of the results it should emit the results plus the that describes the update.

Changeset observables do not support backpressure as a changeset depends on the state of the previous changeset. Handling backpressure should therefore be left to the user.


Parameters
~~~~~~~~~~

- realm - instance from where the object is coming.
   
   
   
- results - instance being observed for changes to be emitted by the flow.
   
   
   

.. _io_realm_coroutines_FlowFactory_from__DynamicRealm__RealmResults_T___:

from
----

public **<any> (?)** from <**T (?)** >(:ref:`DynamicRealm <io_realm_DynamicRealm>` dynamicRealm, :ref:`io.realm.RealmResults\<T> <io_realm_RealmResults>` results)

Creates a for a . It should emit the initial RealmResult when subscribed to and on each subsequent update of the RealmResults.


Type Parameters
~~~~~~~~~~~~~~~

- T - type of RealmObject.
   
   
   

Parameters
~~~~~~~~~~

- results - instance being observed for changes to be emitted by the flow.
   
   
   
- dynamicRealm - instance from where the results are coming.
   
   
   

.. _io_realm_coroutines_FlowFactory_changesetFrom__DynamicRealm__RealmResults_T___:

changesetFrom
-------------

public **<any> (?)** changesetFrom <**T (?)** >(:ref:`DynamicRealm <io_realm_DynamicRealm>` dynamicRealm, :ref:`io.realm.RealmResults\<T> <io_realm_RealmResults>` results)

Creates a for a instance. It should emit the initial results when subscribed to and on each subsequent update of the results it should emit the results plus the that describes the update.

Changeset observables do not support backpressure as a changeset depends on the state of the previous changeset. Handling backpressure should therefore be left to the user.


Parameters
~~~~~~~~~~

- dynamicRealm - instance from where the object is coming.
   
   
   
- results - instance being observed for changes to be emitted by the flow.
   
   
   

.. _io_realm_coroutines_FlowFactory_from__Realm__RealmList_T___:

from
----

public **<any> (?)** from <**T (?)** >(:ref:`Realm <io_realm_Realm>` realm, :ref:`io.realm.RealmList\<T> <io_realm_RealmList>` realmList)

Creates a for a . It should emit the initial RealmResult when subscribed to and on each subsequent update of the RealmList.

Note: is currently not supported on RealmLists.


Type Parameters
~~~~~~~~~~~~~~~

- T - type of RealmObject
   
   
   

Parameters
~~~~~~~~~~

- realmList - instance being observed for changes to be emitted by the flow.
   
   
   
- realm - instance from where the results are coming.
   
   
   

.. _io_realm_coroutines_FlowFactory_changesetFrom__Realm__RealmList_T___:

changesetFrom
-------------

public **<any> (?)** changesetFrom <**T (?)** >(:ref:`Realm <io_realm_Realm>` realm, :ref:`io.realm.RealmList\<T> <io_realm_RealmList>` list)

Creates a for a . It should emit the initial list when subscribed to and on each subsequent update of the list it should emit the list plus the that describes the update.

Changeset observables do not support backpressure as a changeset depends on the state of the previous changeset. Handling backpressure should therefore be left to the user.


Parameters
~~~~~~~~~~

- realm - instance from where the object is coming.
   
   
   
- list - instance being observed for changes to be emitted by the flow.
   
   
   

.. _io_realm_coroutines_FlowFactory_from__DynamicRealm__RealmList_T___:

from
----

public **<any> (?)** from <**T (?)** >(:ref:`DynamicRealm <io_realm_DynamicRealm>` dynamicRealm, :ref:`io.realm.RealmList\<T> <io_realm_RealmList>` realmList)

Creates a for a . It should emit the initial RealmResult when subscribed to and on each subsequent update of the RealmList.

Note: is currently not supported on RealmLists.


Type Parameters
~~~~~~~~~~~~~~~

- T - type of RealmObject
   
   
   

Parameters
~~~~~~~~~~

- realmList - instance being observed for changes to be emitted by the flow.
   
   
   
- dynamicRealm - instance from where the results are coming.
   
   
   

.. _io_realm_coroutines_FlowFactory_changesetFrom__DynamicRealm__RealmList_T___:

changesetFrom
-------------

public **<any> (?)** changesetFrom <**T (?)** >(:ref:`DynamicRealm <io_realm_DynamicRealm>` dynamicRealm, :ref:`io.realm.RealmList\<T> <io_realm_RealmList>` list)

Creates a for a . It should emit the initial list when subscribed to and on each subsequent update of the list it should emit the list plus the that describes the update.

Changeset observables do not support backpressure as a changeset depends on the state of the previous changeset. Handling backpressure should therefore be left to the user.


Parameters
~~~~~~~~~~

- dynamicRealm - instance from where the object is coming.
   
   
   
- list - instance being observed for changes to be emitted by the flow.
   
   
   

.. _io_realm_coroutines_FlowFactory_from__Realm__T__:

from
----

public **<any> (?)** from <**T (?)** >(:ref:`Realm <io_realm_Realm>` realm, **T (?)** realmObject)

Creates a for a . It should emit the initial object when subscribed to and on each subsequent update of the object.


Type Parameters
~~~~~~~~~~~~~~~

- T - type of query target
   
   
   

Parameters
~~~~~~~~~~

- realmObject - instance being observed for changes to be emitted by the flow.
   
   
   
- realm - instance from where the object is coming.
   
   
   

.. _io_realm_coroutines_FlowFactory_changesetFrom__Realm__T__:

changesetFrom
-------------

public **<any> (?)** changesetFrom <**T (?)** >(:ref:`Realm <io_realm_Realm>` realm, **T (?)** realmObject)

Creates a for a . It should emit the initial object when subscribed to and on each subsequent update of the object it should emit the object plus the that describes the update.

Changeset observables do not support backpressure as a changeset depends on the state of the previous changeset. Handling backpressure should therefore be left to the user.


Parameters
~~~~~~~~~~

- realm - instance from where the object is coming.
   
   
   
- realmObject - instance being observed for changes to be emitted by the flow.
   
   
   

.. _io_realm_coroutines_FlowFactory_from__DynamicRealm__DynamicRealmObject__:

from
----

public **<any> (?)** from (:ref:`DynamicRealm <io_realm_DynamicRealm>` dynamicRealm, :ref:`DynamicRealmObject <io_realm_DynamicRealmObject>` dynamicRealmObject)

Creates a for a . It should emit the initial object when subscribed to and on each subsequent update of the object.


Parameters
~~~~~~~~~~

- dynamicRealm - instance from where the object is coming.
   
   
   
- dynamicRealmObject - instance being observed for changes to be emitted by the flow.
   
   
   

.. _io_realm_coroutines_FlowFactory_changesetFrom__DynamicRealm__DynamicRealmObject__:

changesetFrom
-------------

public **<any> (?)** changesetFrom (:ref:`DynamicRealm <io_realm_DynamicRealm>` dynamicRealm, :ref:`DynamicRealmObject <io_realm_DynamicRealmObject>` dynamicRealmObject)

Creates a for a . It should emit the initial object when subscribed to and on each subsequent update of the object it should emit the object plus the that describes the update.

Changeset observables do not support backpressure as a changeset depends on the state of the previous changeset. Handling backpressure should therefore be left to the user.


Parameters
~~~~~~~~~~

- dynamicRealm - instance from where the object is coming.
   
   
   
- dynamicRealmObject - instance being observed for changes to be emitted by the flow.
   
   
   


