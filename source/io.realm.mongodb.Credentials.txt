
.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

io.realm.mongodb.Credentials
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _io_realm_mongodb_Credentials:

*Superclass:*

- **java.lang.Object (?)**

Credentials represent a login with a given login provider, and are used by the MongoDB Realm to verify the user and grant access. The provider is enabled by default. All other providers must be enabled on MongoDB Realm to work.

Note that users wanting to login using Email/Password must register first using . Credentials are used the following way:

.. code-block:: java

    !!!preHtmlParseTagDelimiter!!!{"_class":"Tag","name":"@code","kind":"@code","text":"\n // Example\n App app = new App(\"app-id\");\n Credentials credentials = Credentials.emailPassword(\"email\", \"password\");\n User user = app.loginAsync(credentials, new App.Callback&lt;User&gt;() {\n   \\@Override\n   public void onResult(Result&lt;User&gt; result) {\n     if (result.isSuccess() {\n       handleLogin(result.get());\n     } else {\n       handleError(result.getError());\n     }\n   }\n ));\n }\n ","inlineTags":[{"_class":"Tag","name":"Text","kind":"Text","text":"\n // Example\n App app = new App(\"app-id\");\n Credentials credentials = Credentials.emailPassword(\"email\", \"password\");\n User user = app.loginAsync(credentials, new App.Callback&lt;User&gt;() {\n   \\@Override\n   public void onResult(Result&lt;User&gt; result) {\n     if (result.isSuccess() {\n       handleLogin(result.get());\n     } else {\n       handleError(result.getError());\n     }\n   }\n ));\n }\n "}],"firstSentenceTags":[{"_class":"Tag","name":"Text","kind":"Text","text":"// Example\n App app = new App(\"app-id\");\n Credentials credentials = Credentials.emailPassword(\"email\", \"password\");\n User user = app.loginAsync(credentials, new App.Callback&lt;User&gt;() {\n   \\@Override\n   public void onResult(Result&lt;User&gt; result) {\n     if (result.isSuccess() {\n       handleLogin(result.get());\n     } else {\n       handleError(result.getError());\n     }\n   }\n ));\n }"}]}!!!preHtmlParseTagDelimiter!!!
    


Nested Class Summary
====================

.. list-table::
   :header-rows: 1
   
   * - Modifier and Type
     - Class and Description
   
   * - public static final
     - io.realm.mongodb.Credentials.Provider
   
   
Method Summary
==============

.. list-table::
   :header-rows: 1
   
   * - Modifier and Type
     - Method and Description
   
   * - public static :ref:`Credentials <io_realm_mongodb_Credentials>`
     - :ref:`anonymous <io_realm_mongodb_Credentials_anonymous____>` ()
       
       Creates credentials representing an anonymous user.
       
       
       
       
       
   
   * - public static :ref:`Credentials <io_realm_mongodb_Credentials>`
     - :ref:`apiKey <io_realm_mongodb_Credentials_apiKey__String__>` (**String (?)** key)
       
       Creates credentials representing a login using a user API key.
       
       
       
       
       
   
   * - public static :ref:`Credentials <io_realm_mongodb_Credentials>`
     - :ref:`apple <io_realm_mongodb_Credentials_apple__String__>` (**String (?)** idToken)
       
       Creates credentials representing a login using an Apple ID token.
       
       
       
       
       
   
   * - public static :ref:`Credentials <io_realm_mongodb_Credentials>`
     - :ref:`customFunction <io_realm_mongodb_Credentials_customFunction__Document__>` (**Document (?)** arguments)
       
       Creates credentials representing a remote function from MongoDB Realm using a which will be parsed as an argument to the remote function, so the keys must match the format and names the function expects.
       
       
       
       
       
   
   * - public static :ref:`Credentials <io_realm_mongodb_Credentials>`
     - :ref:`emailPassword <io_realm_mongodb_Credentials_emailPassword__String__String__>` (**String (?)** email, **String (?)** password)
       
       Creates credentials representing a login using email and password.
       
       
       
       
       
   
   * - public static :ref:`Credentials <io_realm_mongodb_Credentials>`
     - :ref:`facebook <io_realm_mongodb_Credentials_facebook__String__>` (**String (?)** accessToken)
       
       Creates credentials representing a login using a Facebook access token.
       
       
       
       
       
   
   * - public static :ref:`Credentials <io_realm_mongodb_Credentials>`
     - :ref:`google <io_realm_mongodb_Credentials_google__String__GoogleAuthType__>` (**String (?)** token, :ref:`GoogleAuthType <io_realm_mongodb_auth_GoogleAuthType>` type)
       
       Creates credentials representing a login using a Google access token of a given .
       
       
       
       
       
   
   * - public static :ref:`Credentials <io_realm_mongodb_Credentials>`
     - :ref:`google <io_realm_mongodb_Credentials_google__String__>` (**String (?)** authorizationCode)
       
       Creates credentials representing a login using a Google access token.
       
       
       
       
       
   
   * - public static :ref:`Credentials <io_realm_mongodb_Credentials>`
     - :ref:`jwt <io_realm_mongodb_Credentials_jwt__String__>` (**String (?)** jwtToken)
       
       Creates credentials representing a login using a JWT Token.
       
       
       
       
       
   
   * - public :ref:`Credentials.Provider <io_realm_mongodb_Credentials_Provider>`
     - :ref:`getIdentityProvider <io_realm_mongodb_Credentials_getIdentityProvider____>` ()
       
       Returns the identity provider used to authenticate with.
       
       
       
       
       
   
   * - public **String (?)**
     - :ref:`asJson <io_realm_mongodb_Credentials_asJson____>` ()
       
       Returns the credentials object serialized as a json string.
       
       
       
       
       
   
   
Method Detail
=============

.. _io_realm_mongodb_Credentials_anonymous____:

anonymous
---------

public static :ref:`Credentials <io_realm_mongodb_Credentials>` anonymous ()

Creates credentials representing an anonymous user.

Logging the user out again means that data is lost with no means of recovery and it isn't possible to share the user details across devices.

The anonymous user must be linked to another real user to preserve data after a log out.


.. _io_realm_mongodb_Credentials_apiKey__String__:

apiKey
------

public static :ref:`Credentials <io_realm_mongodb_Credentials>` apiKey (**String (?)** key)

Creates credentials representing a login using a user API key.

This provider must be enabled on MongoDB Realm to work.


Parameters
~~~~~~~~~~

- key - the API key to use for login.
   
   
   

.. _io_realm_mongodb_Credentials_apple__String__:

apple
-----

public static :ref:`Credentials <io_realm_mongodb_Credentials>` apple (**String (?)** idToken)

Creates credentials representing a login using an Apple ID token.

This provider must be enabled on MongoDB Realm to work.


Parameters
~~~~~~~~~~

- idToken - the ID token generated when using your Apple login.
   
   
   

.. _io_realm_mongodb_Credentials_customFunction__Document__:

customFunction
--------------

public static :ref:`Credentials <io_realm_mongodb_Credentials>` customFunction (**Document (?)** arguments)

Creates credentials representing a remote function from MongoDB Realm using a which will be parsed as an argument to the remote function, so the keys must match the format and names the function expects.

This provider must be enabled on MongoDB Realm to work.


Parameters
~~~~~~~~~~

- arguments - document containing the function arguments.
   
   
   

.. _io_realm_mongodb_Credentials_emailPassword__String__String__:

emailPassword
-------------

public static :ref:`Credentials <io_realm_mongodb_Credentials>` emailPassword (**String (?)** email, **String (?)** password)

Creates credentials representing a login using email and password.


Parameters
~~~~~~~~~~

- email - email of the user logging in.
   
   
   
- password - password of the user logging in.
   
   
   

.. _io_realm_mongodb_Credentials_facebook__String__:

facebook
--------

public static :ref:`Credentials <io_realm_mongodb_Credentials>` facebook (**String (?)** accessToken)

Creates credentials representing a login using a Facebook access token.

This provider must be enabled on MongoDB Realm to work.


Parameters
~~~~~~~~~~

- accessToken - the access token returned when logging in to Facebook.
   
   
   

.. _io_realm_mongodb_Credentials_google__String__GoogleAuthType__:

google
------

public static :ref:`Credentials <io_realm_mongodb_Credentials>` google (**String (?)** token, :ref:`GoogleAuthType <io_realm_mongodb_auth_GoogleAuthType>` type)

Creates credentials representing a login using a Google access token of a given .

This provider must be enabled on MongoDB Realm to work.


Parameters
~~~~~~~~~~

- token - the access token returned when logging in to Google.
   
   
   
- type - the access token type
   
   
   

.. _io_realm_mongodb_Credentials_google__String__:

google
------

public static :ref:`Credentials <io_realm_mongodb_Credentials>` google (**String (?)** authorizationCode)

Creates credentials representing a login using a Google access token.

This provider must be enabled on MongoDB Realm to work.


Parameters
~~~~~~~~~~

- authorizationCode - the authorization code returned when logging in to Google.
   
   
   

.. _io_realm_mongodb_Credentials_jwt__String__:

jwt
----

public static :ref:`Credentials <io_realm_mongodb_Credentials>` jwt (**String (?)** jwtToken)

Creates credentials representing a login using a JWT Token. This token is normally generated after a custom OAuth2 login flow.

This provider must be enabled on MongoDB Realm to work.


Parameters
~~~~~~~~~~

- jwtToken - the jwt token returned after a custom login to a another service.
   
   
   

.. _io_realm_mongodb_Credentials_getIdentityProvider____:

getIdentityProvider
-------------------

public :ref:`Credentials.Provider <io_realm_mongodb_Credentials_Provider>` getIdentityProvider ()

Returns the identity provider used to authenticate with.


.. _io_realm_mongodb_Credentials_asJson____:

asJson
------

public **String (?)** asJson ()

Returns the credentials object serialized as a json string.



