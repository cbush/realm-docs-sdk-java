
.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

io.realm.annotations.RealmNamingPolicy
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _io_realm_annotations_RealmNamingPolicy:

*Superclass:*

- **java.lang.Enum (?)**

This enum defines the possible ways class and field names can be mapped from what is used in Java to the name used internally in the Realm file.

Examples where this is useful:

- To support two model classes with the same simple name but in different packages.
   
   
- To make it easier to work with cross platform schemas as naming conventions are different.
   
   
- To use a Java class name that is longer than the 57 character limit enforced by Realm.
   
   
- To change a field name in Java without forcing app users through a migration process.
   
   

Depending on where the policy is applied, it will have slightly different semantics:

- If applied to
   
   

**RealmModule#classNamingPolicy (?)** all classes part of that module will be affected. If a class is part of multiple modules, the same naming policy must be applied to both modules, otherwise an error will be thrown.

**RealmModule#fieldNamingPolicy (?)** all persistable fields in all classes part of this module will be affected.

**RealmClass#fieldNamingPolicy (?)** all fields in that class will be affected. This will override any field naming policy specified on a module.

An example of this:

.. code-block:: java

    


    \@RealmClass(name = "__person", fieldNamingPolicy = RealmNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)
    public class Person implements RealmModel { // is converted to "__person" internally
        public string firstName; // Is converted to "first_name" internally
    }
    

Choosing an internal name that differs from the name used in the Java model classes has the following implications:

- Queries on
   
   

``DynamicRealm`` must use the internal name. Queries on normal ``Realm`` instances must continue to use the name as it is defined in the Java class.

When automatically converting Java variable names, each variable name is normalized by splitting it into a list of words that are then joined using the rules of the target format. The following heuristics are used for determining what constitutes a "word".

1. Anytime a
   
   

``_`` or ``$`` is encountered. Examples are "_FirstName", "_First_Name" and "$First$Name" which all becomes "First" and "Name".

**Character#isUpperCase(int) (?)** and **Character#isLowerCase(int) (?)** . Example is "FirstName" which becomes "First" and "Name".

**Character#isUpperCase(int) (?)** and **Character#isLowerCase(int) (?)** . Example is "FIRSTName" which becomes "FIRST" and "Name.

Note that changing the internal name does *NOT* affect importing data from JSON. The JSON data must still follow the names as defined in the Realm Java class.

When it comes to parsing JSON using standard libraries like Moshi, GSON or Jackson it is important to keep in mind that these libraries define the transformation from JSON to Java while setting internal Realm names define the transformation from Java to the Realm file.

This means that if you want to import data into Realm from JSON using these libraries you still need to provide the annotations from both the JSON parser library and Realm.

Using Moshi, it would look something like this:

.. code-block:: java

    


    public class Person extends RealmObject {
        \@Json(name = "first_name") // Name used in JSON input.
        \@RealmField(name = "first_name") // Name used internally in the Realm file.
        public string firstName; // name used in Java
    }
    


Method Summary
==============

.. list-table::
   :header-rows: 1
   
   * - Modifier and Type
     - Method and Description
   
   * - public static :ref:`RealmNamingPolicy <io_realm_annotations_RealmNamingPolicy>`
     - :ref:`values <io_realm_annotations_RealmNamingPolicy_values____>` ()
       
       
       
       
       
   
   * - public static :ref:`RealmNamingPolicy <io_realm_annotations_RealmNamingPolicy>`
     - :ref:`valueOf <io_realm_annotations_RealmNamingPolicy_valueOf__String__>` (**String (?)** name)
       
       
       
       
       
   
   
Method Detail
=============

.. _io_realm_annotations_RealmNamingPolicy_values____:

values
------

public static :ref:`RealmNamingPolicy <io_realm_annotations_RealmNamingPolicy>` values ()


.. _io_realm_annotations_RealmNamingPolicy_valueOf__String__:

valueOf
-------

public static :ref:`RealmNamingPolicy <io_realm_annotations_RealmNamingPolicy>` valueOf (**String (?)** name)



